generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  nameKana     String
  phone        String        @unique
  email        String        @unique
  password     String
  birthDate    DateTime
  memberType   String        @default("regular")
  points       Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ngCasts      NgCastEntry[]
  reservations Reservation[]
  reviews      Review[]
}

model Cast {
  id                     String         @id @default(cuid())
  name                   String
  age                    Int
  height                 Int
  bust                   String
  waist                  Int
  hip                    Int
  type                   String
  image                  String
  images                 String[]
  description            String
  netReservation         Boolean
  specialDesignationFee  Int?
  regularDesignationFee  Int?
  panelDesignationRank   Int
  regularDesignationRank Int
  workStatus             String
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  schedules              CastSchedule[]
  ngByCustomers          NgCastEntry[]
  reservations           Reservation[]
  reviews                Review[]
}

model NgCastEntry {
  customerId String
  castId     String
  assignedAt DateTime @default(now())
  cast       Cast     @relation(fields: [castId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])

  @@id([customerId, castId])
}

model Reservation {
  id         String              @id @default(cuid())
  customerId String
  castId     String
  courseId   String
  startTime  DateTime
  endTime    DateTime
  status     String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  cast       Cast                @relation(fields: [castId], references: [id])
  course     CoursePrice         @relation(fields: [courseId], references: [id])
  customer   Customer            @relation(fields: [customerId], references: [id])
  options    ReservationOption[]
}

model CoursePrice {
  id           String        @id @default(cuid())
  name         String
  duration     Int
  price        Int
  description  String
  reservations Reservation[]
}

model OptionPrice {
  id           String              @id @default(cuid())
  name         String
  price        Int
  reservations ReservationOption[]
}

model ReservationOption {
  reservationId String
  optionId      String
  option        OptionPrice @relation(fields: [optionId], references: [id])
  reservation   Reservation @relation(fields: [reservationId], references: [id])

  @@id([reservationId, optionId])
}

model Review {
  id         String   @id @default(cuid())
  customerId String
  castId     String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  cast       Cast     @relation(fields: [castId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
}

model CastSchedule {
  id          String   @id @default(cuid())
  castId      String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean
  cast        Cast     @relation(fields: [castId], references: [id])

  @@unique([castId, date])
}

model Admin {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  role        String    @default("staff")
  permissions Json?
  isActive    Boolean   @default(true)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PaymentIntent {
  id             String                @id @default(cuid())
  providerId     String                @unique
  provider       String
  amount         Int
  currency       String
  status         String
  paymentMethod  String
  clientSecret   String
  metadata       Json?
  processedAt    DateTime?
  errorMessage   String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  transactions   PaymentTransaction[]
}

model PaymentTransaction {
  id                    String        @id @default(cuid())
  paymentIntentId       String?
  intentId              String?       @unique
  providerTransactionId String?       @unique
  reservationId         String        @unique
  customerId            String
  amount                Int
  currency              String
  provider              String
  paymentMethod         String
  status                String
  stripePaymentId       String?       @unique
  refundedAt            DateTime?
  refundAmount          Int?
  metadata              Json?
  processedAt           DateTime?
  errorMessage          String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  paymentIntent         PaymentIntent? @relation(fields: [paymentIntentId], references: [id])
}
