generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  nameKana     String
  phone        String        @unique
  email        String        @unique
  password     String
  birthDate    DateTime
  memberType   String        @default("regular")
  points       Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  resetToken           String?
  resetTokenExpiry     DateTime?
  emailVerified        Boolean       @default(false)
  emailVerificationToken String?
  emailVerificationExpiry DateTime?
  ngCasts      NgCastEntry[]
  reservations Reservation[]
  reviews      Review[]
  messages     Message[]
}

model Cast {
  id                     String         @id @default(cuid())
  name                   String
  age                    Int
  height                 Int
  bust                   String
  waist                  Int
  hip                    Int
  type                   String
  image                  String
  images                 String[]
  description            String
  netReservation         Boolean
  specialDesignationFee  Int?
  regularDesignationFee  Int?
  panelDesignationRank   Int
  regularDesignationRank Int
  workStatus             String
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  schedules              CastSchedule[]
  ngByCustomers          NgCastEntry[]
  reservations           Reservation[]
  reviews                Review[]
}

model NgCastEntry {
  customerId String
  castId     String
  assignedAt DateTime @default(now())
  cast       Cast     @relation(fields: [castId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])

  @@id([customerId, castId])
}

model Reservation {
  id         String              @id @default(cuid())
  customerId String
  castId     String
  courseId   String
  startTime  DateTime
  endTime    DateTime
  status     String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  cast       Cast                @relation(fields: [castId], references: [id])
  course     CoursePrice         @relation(fields: [courseId], references: [id])
  customer   Customer            @relation(fields: [customerId], references: [id])
  options    ReservationOption[]
}

model CoursePrice {
  id           String        @id @default(cuid())
  name         String
  duration     Int
  price        Int
  description  String
  reservations Reservation[]
}

model OptionPrice {
  id           String              @id @default(cuid())
  name         String
  price        Int
  reservations ReservationOption[]
}

model ReservationOption {
  reservationId String
  optionId      String
  option        OptionPrice @relation(fields: [optionId], references: [id])
  reservation   Reservation @relation(fields: [reservationId], references: [id])

  @@id([reservationId, optionId])
}

model Review {
  id         String   @id @default(cuid())
  customerId String
  castId     String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  cast       Cast     @relation(fields: [castId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
}

model CastSchedule {
  id          String   @id @default(cuid())
  castId      String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean
  cast        Cast     @relation(fields: [castId], references: [id])

  @@unique([castId, date])
}

model Admin {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  role        String    @default("staff")
  permissions Json?
  isActive    Boolean   @default(true)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id                String   @id @default(cuid())
  customerId        String
  sender            String   // 'customer' or 'staff'
  content           String
  timestamp         DateTime
  readStatus        String   @default("未読") // '未読' or '既読'
  isReservationInfo Boolean  @default(false)
  reservationInfo   Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  customer          Customer @relation(fields: [customerId], references: [id])
  
  @@index([customerId, timestamp])
}

model PaymentIntent {
  id                  String              @id @default(cuid())
  stripeIntentId      String              @unique
  amount              Int
  currency            String              @default("jpy")
  status              String              // e.g., 'requires_payment_method', 'succeeded', 'canceled'
  customerId          String?
  metadata            Json?
  providerId          String?             // Provider-specific ID
  provider            String?             // Payment provider name
  paymentMethod       String?             // Payment method type
  errorMessage        String?             // Error message if failed
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  paymentTransactions PaymentTransaction[]
}

model PaymentTransaction {
  id              String         @id @default(cuid())
  paymentIntentId String?
  amount          Int
  currency        String         @default("jpy")
  status          String         // e.g., 'pending', 'completed', 'failed', 'refunded'
  type            String         // e.g., 'payment', 'refund'
  provider        String         // e.g., 'stripe', 'cash'
  paymentMethod   String         // e.g., 'card', 'cash'
  customerId      String?
  reservationId   String?
  stripePaymentId String?
  metadata        Json?
  errorMessage    String?
  processedAt     DateTime?
  refundedAt      DateTime?
  refundAmount    Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  paymentIntent   PaymentIntent? @relation(fields: [paymentIntentId], references: [id])
}

model StoreSettings {
  id            String   @id @default(cuid())
  storeName     String
  address       String
  phone         String
  email         String
  website       String?
  businessHours String
  description   String
  zipCode       String
  prefecture    String
  city          String
  building      String?
  businessDays  String
  lastOrder     String
  parkingInfo   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model HotelSettings {
  id           String   @id @default(cuid())
  hotelName    String
  area         String
  roomCount    Int
  hourlyRate   Int
  address      String
  phone        String
  checkInTime  String
  checkOutTime String
  amenities    String[]
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
