{
  "numTotalTestSuites": 344,
  "numPassedTestSuites": 344,
  "numFailedTestSuites": 0,
  "numPendingTestSuites": 0,
  "numTotalTests": 620,
  "numPassedTests": 613,
  "numFailedTests": 0,
  "numPendingTests": 7,
  "numTodoTests": 0,
  "snapshot": {
    "added": 0,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 1,
    "total": 1,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0,
    "didUpdate": false
  },
  "startTime": 1754356050893,
  "success": true,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Middleware Authentication", "Admin Routes Protection"],
          "fullName": "Middleware Authentication Admin Routes Protection should redirect to /admin/login when accessing admin routes without authentication",
          "status": "passed",
          "title": "should redirect to /admin/login when accessing admin routes without authentication",
          "duration": 1.4462910000002012,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "Admin Routes Protection"],
          "fullName": "Middleware Authentication Admin Routes Protection should allow access to admin routes with valid admin session",
          "status": "passed",
          "title": "should allow access to admin routes with valid admin session",
          "duration": 0.4574579999998605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "Admin Routes Protection"],
          "fullName": "Middleware Authentication Admin Routes Protection should deny access to admin routes for non-admin users",
          "status": "passed",
          "title": "should deny access to admin routes for non-admin users",
          "duration": 0.34370799999987867,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "Customer Routes Protection"],
          "fullName": "Middleware Authentication Customer Routes Protection should redirect to login when accessing protected customer routes without authentication",
          "status": "passed",
          "title": "should redirect to login when accessing protected customer routes without authentication",
          "duration": 0.4978329999999005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "Customer Routes Protection"],
          "fullName": "Middleware Authentication Customer Routes Protection should allow access to protected customer routes with valid session",
          "status": "passed",
          "title": "should allow access to protected customer routes with valid session",
          "duration": 0.34795800000028976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "Public Routes"],
          "fullName": "Middleware Authentication Public Routes should allow access to public routes without authentication",
          "status": "passed",
          "title": "should allow access to public routes without authentication",
          "duration": 1.0102080000001479,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "Public Routes"],
          "fullName": "Middleware Authentication Public Routes should allow access to login and register pages without authentication",
          "status": "passed",
          "title": "should allow access to login and register pages without authentication",
          "duration": 0.7588329999998678,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "API Routes Protection"],
          "fullName": "Middleware Authentication API Routes Protection should protect reservation API endpoints",
          "status": "passed",
          "title": "should protect reservation API endpoints",
          "duration": 0.38200000000006185,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "API Routes Protection"],
          "fullName": "Middleware Authentication API Routes Protection should protect cast API endpoints",
          "status": "passed",
          "title": "should protect cast API endpoints",
          "duration": 0.3296660000000884,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "API Routes Protection"],
          "fullName": "Middleware Authentication API Routes Protection should allow authenticated users to access protected API routes",
          "status": "passed",
          "title": "should allow authenticated users to access protected API routes",
          "duration": 0.3236249999999927,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "Session Management"],
          "fullName": "Middleware Authentication Session Management should redirect authenticated admin to dashboard from login page",
          "status": "passed",
          "title": "should redirect authenticated admin to dashboard from login page",
          "duration": 0.3555830000000242,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Middleware Authentication", "Session Management"],
          "fullName": "Middleware Authentication Session Management should redirect /admin to /admin/dashboard for authenticated admin",
          "status": "passed",
          "title": "should redirect /admin to /admin/dashboard for authenticated admin",
          "duration": 0.3380000000001928,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054432,
      "endTime": 1754356054438.3555,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/middleware.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["useAuth hook"],
          "fullName": "useAuth hook should be defined",
          "status": "passed",
          "title": "should be defined",
          "duration": 0.32466699999986304,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useAuth hook"],
          "fullName": "useAuth hook should provide authentication utilities",
          "status": "passed",
          "title": "should provide authentication utilities",
          "duration": 0.1254159999998592,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useAuth hook"],
          "fullName": "useAuth hook should return authenticated state when user is logged in",
          "status": "passed",
          "title": "should return authenticated state when user is logged in",
          "duration": 0.6581660000001648,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useAuth hook"],
          "fullName": "useAuth hook should return loading state",
          "status": "passed",
          "title": "should return loading state",
          "duration": 0.3457090000001699,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useAuth hook"],
          "fullName": "useAuth hook should call signIn with correct parameters",
          "status": "passed",
          "title": "should call signIn with correct parameters",
          "duration": 0.5115409999998519,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useAdminAuth hook"],
          "fullName": "useAdminAuth hook should identify admin users correctly",
          "status": "passed",
          "title": "should identify admin users correctly",
          "duration": 0.34245800000007875,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useAdminAuth hook"],
          "fullName": "useAdminAuth hook should not identify non-admin users as admin",
          "status": "passed",
          "title": "should not identify non-admin users as admin",
          "duration": 0.3070830000006026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useCustomerAuth hook"],
          "fullName": "useCustomerAuth hook should identify customer users correctly",
          "status": "passed",
          "title": "should identify customer users correctly",
          "duration": 0.3157920000003287,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useCustomerAuth hook"],
          "fullName": "useCustomerAuth hook should not identify non-customer users as customer",
          "status": "passed",
          "title": "should not identify non-customer users as customer",
          "duration": 0.3169580000003407,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054923,
      "endTime": 1754356054926.317,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/hooks/use-auth.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Constants"],
          "fullName": "Constants should match the snapshot for all exported constants",
          "status": "passed",
          "title": "should match the snapshot for all exported constants",
          "duration": 0.7004579999993439,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055931,
      "endTime": 1754356055931.7004,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/constants.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["cn utility function"],
          "fullName": "cn utility function should combine class names",
          "status": "passed",
          "title": "should combine class names",
          "duration": 0.06837500000074215,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["cn utility function"],
          "fullName": "cn utility function should handle conditional classes",
          "status": "passed",
          "title": "should handle conditional classes",
          "duration": 0.03245799999967858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["cn utility function"],
          "fullName": "cn utility function should merge Tailwind classes correctly",
          "status": "passed",
          "title": "should merge Tailwind classes correctly",
          "duration": 0.031458000000384345,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["cn utility function"],
          "fullName": "cn utility function should handle undefined and null values",
          "status": "passed",
          "title": "should handle undefined and null values",
          "duration": 0.04441699999915727,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["cn utility function"],
          "fullName": "cn utility function should handle empty strings",
          "status": "passed",
          "title": "should handle empty strings",
          "duration": 0.03666700000030687,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055897,
      "endTime": 1754356055897.0684,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Prisma schema"],
          "fullName": "Prisma schema should have Cast model defined",
          "status": "passed",
          "title": "should have Cast model defined",
          "duration": 0.280666999999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Prisma schema"],
          "fullName": "Prisma schema should have Customer model defined",
          "status": "passed",
          "title": "should have Customer model defined",
          "duration": 0.05662500000016735,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Prisma schema"],
          "fullName": "Prisma schema should have Reservation model defined",
          "status": "passed",
          "title": "should have Reservation model defined",
          "duration": 0.052999999999883585,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Prisma schema"],
          "fullName": "Prisma schema should have CoursePrice model defined",
          "status": "passed",
          "title": "should have CoursePrice model defined",
          "duration": 0.04550000000017462,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Prisma schema"],
          "fullName": "Prisma schema should have OptionPrice model defined",
          "status": "passed",
          "title": "should have OptionPrice model defined",
          "duration": 0.04341699999986304,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Prisma schema"],
          "fullName": "Prisma schema should have Review model defined",
          "status": "passed",
          "title": "should have Review model defined",
          "duration": 0.04229100000065955,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Prisma schema"],
          "fullName": "Prisma schema should have proper database provider",
          "status": "passed",
          "title": "should have proper database provider",
          "duration": 0.04125000000021828,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055844,
      "endTime": 1754356055845.0413,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/prisma/schema.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Cast Navigation", "Legacy cast detail page redirect"],
          "fullName": "Cast Navigation Legacy cast detail page redirect should redirect from /admin/cast/[id] to /admin/cast/manage/[id]",
          "status": "passed",
          "title": "should redirect from /admin/cast/[id] to /admin/cast/manage/[id]",
          "duration": 0.08449999999993452,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast Navigation", "Legacy cast detail page redirect"],
          "fullName": "Cast Navigation Legacy cast detail page redirect should handle different cast IDs correctly",
          "status": "passed",
          "title": "should handle different cast IDs correctly",
          "duration": 0.6555829999997513,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055855,
      "endTime": 1754356055855.6555,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/__tests__/navigation/cast-navigation.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Customer Journey Integration Tests"],
          "fullName": "Customer Journey Integration Tests should complete a full customer journey: registration -> reservation -> review",
          "status": "passed",
          "title": "should complete a full customer journey: registration -> reservation -> review",
          "duration": 4.825083000000177,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer Journey Integration Tests"],
          "fullName": "Customer Journey Integration Tests should handle pricing calculation across course and options",
          "status": "passed",
          "title": "should handle pricing calculation across course and options",
          "duration": 0.837291999999934,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer Journey Integration Tests"],
          "fullName": "Customer Journey Integration Tests should handle reservation conflicts and availability checking",
          "status": "passed",
          "title": "should handle reservation conflicts and availability checking",
          "duration": 0.5048749999998563,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer Journey Integration Tests"],
          "fullName": "Customer Journey Integration Tests should aggregate customer data across multiple APIs",
          "status": "passed",
          "title": "should aggregate customer data across multiple APIs",
          "duration": 1.2516250000001037,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast Performance Analytics Integration"],
          "fullName": "Cast Performance Analytics Integration should calculate cast performance metrics across reservations and reviews",
          "status": "passed",
          "title": "should calculate cast performance metrics across reservations and reviews",
          "duration": 0.8598329999999805,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052418,
      "endTime": 1754356052426.8599,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should display error when no token is provided",
          "status": "passed",
          "title": "should display error when no token is provided",
          "duration": 3.0835409999999683,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should navigate to login when clicking login button (no token)",
          "status": "passed",
          "title": "should navigate to login when clicking login button (no token)",
          "duration": 10.250291999999718,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should display password reset form with valid token",
          "status": "passed",
          "title": "should display password reset form with valid token",
          "duration": 4.838750000000346,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should validate password length",
          "status": "passed",
          "title": "should validate password length",
          "duration": 33.49087499999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should validate password confirmation match",
          "status": "passed",
          "title": "should validate password confirmation match",
          "duration": 66.12566700000025,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should successfully reset password",
          "status": "passed",
          "title": "should successfully reset password",
          "duration": 82.64625000000024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should navigate to login after successful reset",
          "status": "passed",
          "title": "should navigate to login after successful reset",
          "duration": 95.19808400000011,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should display error on API failure",
          "status": "passed",
          "title": "should display error on API failure",
          "duration": 98.70316700000012,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should display generic error on network failure",
          "status": "passed",
          "title": "should display generic error on network failure",
          "duration": 104.4285420000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResetPasswordPage"],
          "fullName": "ResetPasswordPage should disable form during submission",
          "status": "passed",
          "title": "should disable form during submission",
          "duration": 207.051375,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356053215,
      "endTime": 1754356053921.0513,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/reset-password/page.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["VerifyEmailPage"],
          "fullName": "VerifyEmailPage should show error when no token is provided",
          "status": "passed",
          "title": "should show error when no token is provided",
          "duration": 3.90008300000045,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["VerifyEmailPage"],
          "fullName": "VerifyEmailPage should successfully verify email with valid token",
          "status": "passed",
          "title": "should successfully verify email with valid token",
          "duration": 4.996208999999908,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["VerifyEmailPage"],
          "fullName": "VerifyEmailPage should show error for invalid token",
          "status": "passed",
          "title": "should show error for invalid token",
          "duration": 3.326958999999988,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["VerifyEmailPage"],
          "fullName": "VerifyEmailPage should show custom success message from API response",
          "status": "passed",
          "title": "should show custom success message from API response",
          "duration": 3.1049160000002303,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["VerifyEmailPage"],
          "fullName": "VerifyEmailPage should handle network errors",
          "status": "passed",
          "title": "should handle network errors",
          "duration": 3.0494999999991705,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["VerifyEmailPage"],
          "fullName": "VerifyEmailPage should handle API response without error field",
          "status": "passed",
          "title": "should handle API response without error field",
          "duration": 3.0771670000003724,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["VerifyEmailPage"],
          "fullName": "VerifyEmailPage should navigate to login page when button is clicked",
          "status": "passed",
          "title": "should navigate to login page when button is clicked",
          "duration": 11.778667000000496,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["VerifyEmailPage"],
          "fullName": "VerifyEmailPage should not show button during loading state",
          "status": "passed",
          "title": "should not show button during loading state",
          "duration": 0.9399579999999332,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["VerifyEmailPage"],
          "fullName": "VerifyEmailPage should use different button variant for error state",
          "status": "passed",
          "title": "should use different button variant for error state",
          "duration": 4.193916000000172,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054574,
      "endTime": 1754356054612.1938,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/verify-email/page.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ForgotPasswordForm"],
          "fullName": "ForgotPasswordForm should display the form initially",
          "status": "passed",
          "title": "should display the form initially",
          "duration": 4.691792000000532,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ForgotPasswordForm"],
          "fullName": "ForgotPasswordForm should successfully submit and show success message",
          "status": "passed",
          "title": "should successfully submit and show success message",
          "duration": 46.77695800000038,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ForgotPasswordForm"],
          "fullName": "ForgotPasswordForm should show success message even on API error (security)",
          "status": "passed",
          "title": "should show success message even on API error (security)",
          "duration": 62.54962499999965,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ForgotPasswordForm"],
          "fullName": "ForgotPasswordForm should show success message even on network error (security)",
          "status": "passed",
          "title": "should show success message even on network error (security)",
          "duration": 52.867707999999766,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ForgotPasswordForm"],
          "fullName": "ForgotPasswordForm should disable form during submission",
          "status": "passed",
          "title": "should disable form during submission",
          "duration": 54.49945899999966,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ForgotPasswordForm"],
          "fullName": "ForgotPasswordForm should have a link back to login",
          "status": "passed",
          "title": "should have a link back to login",
          "duration": 8.823457999999846,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054656,
      "endTime": 1754356054886.8235,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/components/auth/forgot-password-form.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["RegisterForm"],
          "fullName": "RegisterForm should render the component without errors",
          "status": "passed",
          "title": "should render the component without errors",
          "duration": 0.06791599999996834,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RegisterForm"],
          "fullName": "RegisterForm should handle form submission with valid data",
          "status": "passed",
          "title": "should handle form submission with valid data",
          "duration": 0.055041999999957625,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RegisterForm"],
          "fullName": "RegisterForm should validate required fields",
          "status": "passed",
          "title": "should validate required fields",
          "duration": 0.02829100000053586,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RegisterForm"],
          "fullName": "RegisterForm should hash password before submission",
          "status": "passed",
          "title": "should hash password before submission",
          "duration": 0.10966599999937898,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055539,
      "endTime": 1754356055539.1096,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/components/auth/register-form.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Role Guard Components"],
          "fullName": "Role Guard Components should be defined",
          "status": "passed",
          "title": "should be defined",
          "duration": 0.07687499999974534,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Role Guard Components"],
          "fullName": "Role Guard Components should export function components",
          "status": "passed",
          "title": "should export function components",
          "duration": 0.047417000000677945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Role Guard Components"],
          "fullName": "Role Guard Components should handle role-based access control",
          "status": "passed",
          "title": "should handle role-based access control",
          "duration": 0.04304200000024139,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055787,
      "endTime": 1754356055787.077,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/components/auth/role-guard.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should toggle edit mode when edit button is clicked",
          "status": "passed",
          "title": "should toggle edit mode when edit button is clicked",
          "duration": 104.80141600000024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should display editable fields in edit mode",
          "status": "skipped",
          "title": "should display editable fields in edit mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should show status change buttons in edit mode",
          "status": "passed",
          "title": "should show status change buttons in edit mode",
          "duration": 63.06729099999984,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should show confirmation dialog when changing status",
          "status": "passed",
          "title": "should show confirmation dialog when changing status",
          "duration": 101.15495899999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should show modifiable button for confirmed reservations",
          "status": "skipped",
          "title": "should show modifiable button for confirmed reservations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should change status to modifiable when modify button is clicked",
          "status": "skipped",
          "title": "should change status to modifiable when modify button is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should show time limit warning when reservation is modifiable",
          "status": "skipped",
          "title": "should show time limit warning when reservation is modifiable",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should automatically revert to confirmed status when time expires",
          "status": "skipped",
          "title": "should automatically revert to confirmed status when time expires",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should validate form inputs before saving",
          "status": "skipped",
          "title": "should validate form inputs before saving",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationDialog Edit Mode"],
          "fullName": "ReservationDialog Edit Mode should exit edit mode when cancel is clicked",
          "status": "skipped",
          "title": "should exit edit mode when cancel is clicked",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052804,
      "endTime": 1754356053073.155,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/components/reservation/reservation-dialog.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Button component"],
          "fullName": "Button component should render the button with its children",
          "status": "passed",
          "title": "should render the button with its children",
          "duration": 5.091332999999395,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Button component"],
          "fullName": "Button component should call the onClick handler when clicked",
          "status": "passed",
          "title": "should call the onClick handler when clicked",
          "duration": 4.764084000000366,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Button component"],
          "fullName": "Button component should apply the correct variant and size classes",
          "status": "passed",
          "title": "should apply the correct variant and size classes",
          "duration": 4.557334000000083,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Button component"],
          "fullName": "Button component should render as a different component when asChild is true",
          "status": "passed",
          "title": "should render as a different component when asChild is true",
          "duration": 2.972834000000148,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Button component"],
          "fullName": "Button component should be disabled when the disabled prop is set",
          "status": "passed",
          "title": "should be disabled when the disabled prop is set",
          "duration": 4.8559170000007725,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055708,
      "endTime": 1754356055729.856,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/components/ui/button.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Analytics Data Generators", "generateMonthlyData"],
          "fullName": "Analytics Data Generators generateMonthlyData should generate 12 months of data",
          "status": "passed",
          "title": "should generate 12 months of data",
          "duration": 0.1839589999999589,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Data Generators", "generateMonthlyData"],
          "fullName": "Analytics Data Generators generateMonthlyData should contain all required keys for each month",
          "status": "passed",
          "title": "should contain all required keys for each month",
          "duration": 0.05495800000062445,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Data Generators", "generateMonthlyData"],
          "fullName": "Analytics Data Generators generateMonthlyData should correctly calculate derived values",
          "status": "passed",
          "title": "should correctly calculate derived values",
          "duration": 0.04916700000012497,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Data Generators", "generateDailyData"],
          "fullName": "Analytics Data Generators generateDailyData should generate data for the correct number of days in a month",
          "status": "passed",
          "title": "should generate data for the correct number of days in a month",
          "duration": 0.16112500000053842,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Data Generators", "generateDailyData"],
          "fullName": "Analytics Data Generators generateDailyData should contain all required keys for each day",
          "status": "passed",
          "title": "should contain all required keys for each day",
          "duration": 0.05554200000005949,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Data Generators", "generateDailyData"],
          "fullName": "Analytics Data Generators generateDailyData should correctly calculate derived daily values",
          "status": "passed",
          "title": "should correctly calculate derived daily values",
          "duration": 0.046875,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Data Generators", "generateCourseSalesData"],
          "fullName": "Analytics Data Generators generateCourseSalesData should generate sales data for all courses",
          "status": "passed",
          "title": "should generate sales data for all courses",
          "duration": 0.06520899999941321,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Data Generators", "generateOptionSalesData"],
          "fullName": "Analytics Data Generators generateOptionSalesData should generate sales data for all options",
          "status": "passed",
          "title": "should generate sales data for all options",
          "duration": 0.061916999999994005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Data Generators", "generateMarketingChannelData"],
          "fullName": "Analytics Data Generators generateMarketingChannelData should return a static array of marketing data",
          "status": "passed",
          "title": "should return a static array of marketing data",
          "duration": 0.08091699999931734,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Data Generators", "staffPerformanceData"],
          "fullName": "Analytics Data Generators staffPerformanceData should be a non-empty array with the correct structure",
          "status": "passed",
          "title": "should be a non-empty array with the correct structure",
          "duration": 0.06237500000042928,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055397,
      "endTime": 1754356055398.0808,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/analytics/data.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AnalyticsUseCases", "getMonthlyReport"],
          "fullName": "AnalyticsUseCases getMonthlyReport should return monthly data for a specific year",
          "status": "passed",
          "title": "should return monthly data for a specific year",
          "duration": 0.3030829999997877,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getMonthlyReport"],
          "fullName": "AnalyticsUseCases getMonthlyReport should return empty array when no data available",
          "status": "passed",
          "title": "should return empty array when no data available",
          "duration": 0.12862500000028376,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getDailyReport"],
          "fullName": "AnalyticsUseCases getDailyReport should return daily data for a specific year and month",
          "status": "passed",
          "title": "should return daily data for a specific year and month",
          "duration": 0.14162500000020373,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getDailyReport"],
          "fullName": "AnalyticsUseCases getDailyReport should handle months with no data",
          "status": "passed",
          "title": "should handle months with no data",
          "duration": 0.11004199999979392,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getStaffPerformance"],
          "fullName": "AnalyticsUseCases getStaffPerformance should return staff performance data",
          "status": "passed",
          "title": "should return staff performance data",
          "duration": 0.16170899999997346,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getStaffPerformance"],
          "fullName": "AnalyticsUseCases getStaffPerformance should return empty array when no staff data available",
          "status": "passed",
          "title": "should return empty array when no staff data available",
          "duration": 0.08374999999978172,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getCourseSalesReport"],
          "fullName": "AnalyticsUseCases getCourseSalesReport should return course sales data for a specific year and month",
          "status": "passed",
          "title": "should return course sales data for a specific year and month",
          "duration": 0.10591700000031778,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getCourseSalesReport"],
          "fullName": "AnalyticsUseCases getCourseSalesReport should return empty array for future dates",
          "status": "passed",
          "title": "should return empty array for future dates",
          "duration": 0.09195899999986068,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getOptionSalesReport"],
          "fullName": "AnalyticsUseCases getOptionSalesReport should return option sales data for a specific year",
          "status": "passed",
          "title": "should return option sales data for a specific year",
          "duration": 0.09712500000023283,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getOptionSalesReport"],
          "fullName": "AnalyticsUseCases getOptionSalesReport should handle years with no option sales",
          "status": "passed",
          "title": "should handle years with no option sales",
          "duration": 0.07816600000023755,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getMarketingChannelReport"],
          "fullName": "AnalyticsUseCases getMarketingChannelReport should return marketing channel data for a specific year",
          "status": "passed",
          "title": "should return marketing channel data for a specific year",
          "duration": 0.08354199999985212,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalyticsUseCases", "getMarketingChannelReport"],
          "fullName": "AnalyticsUseCases getMarketingChannelReport should return empty array when no marketing data available",
          "status": "passed",
          "title": "should return empty array when no marketing data available",
          "duration": 0.07187500000009095,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356053093,
      "endTime": 1754356053095.0835,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/analytics/usecases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Analytics Utilities", "getMonthlyData"],
          "fullName": "Analytics Utilities getMonthlyData should call generateMonthlyData with the correct year and return its result",
          "status": "passed",
          "title": "should call generateMonthlyData with the correct year and return its result",
          "duration": 0.3952080000008209,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Utilities", "getDailyData"],
          "fullName": "Analytics Utilities getDailyData should call generateDailyData with the correct year and month and return its result",
          "status": "passed",
          "title": "should call generateDailyData with the correct year and month and return its result",
          "duration": 0.1693330000007336,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analytics Utilities", "getStaffPerformanceData"],
          "fullName": "Analytics Utilities getStaffPerformanceData should return staffPerformanceData",
          "status": "passed",
          "title": "should return staffPerformanceData",
          "duration": 0.13720900000043912,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055765,
      "endTime": 1754356055766.1694,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/analytics/utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Auth Config", "authOptions"],
          "fullName": "Auth Config authOptions should have correct configuration",
          "status": "passed",
          "title": "should have correct configuration",
          "duration": 0.31195800000023155,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "authOptions"],
          "fullName": "Auth Config authOptions should have a secret in non-production",
          "status": "passed",
          "title": "should have a secret in non-production",
          "duration": 0.07008300000006784,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Admin Credentials Provider"],
          "fullName": "Auth Config Admin Credentials Provider should return null for missing credentials",
          "status": "passed",
          "title": "should return null for missing credentials",
          "duration": 0.14787500000011278,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Admin Credentials Provider"],
          "fullName": "Auth Config Admin Credentials Provider should handle rate limiting",
          "status": "passed",
          "title": "should handle rate limiting",
          "duration": 0.13337500000034197,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Admin Credentials Provider"],
          "fullName": "Auth Config Admin Credentials Provider should return null for non-existent admin",
          "status": "passed",
          "title": "should return null for non-existent admin",
          "duration": 0.1380420000000413,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Admin Credentials Provider"],
          "fullName": "Auth Config Admin Credentials Provider should handle inactive admin",
          "status": "passed",
          "title": "should handle inactive admin",
          "duration": 0.2555419999998776,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Admin Credentials Provider"],
          "fullName": "Auth Config Admin Credentials Provider should return null for invalid password",
          "status": "passed",
          "title": "should return null for invalid password",
          "duration": 0.11979200000041601,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Admin Credentials Provider"],
          "fullName": "Auth Config Admin Credentials Provider should successfully authenticate admin with permissions",
          "status": "passed",
          "title": "should successfully authenticate admin with permissions",
          "duration": 0.17812499999990905,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Admin Credentials Provider"],
          "fullName": "Auth Config Admin Credentials Provider should handle invalid permissions JSON gracefully",
          "status": "passed",
          "title": "should handle invalid permissions JSON gracefully",
          "duration": 0.0999589999996715,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Admin Credentials Provider"],
          "fullName": "Auth Config Admin Credentials Provider should handle database errors",
          "status": "passed",
          "title": "should handle database errors",
          "duration": 1.0760839999998097,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Customer Credentials Provider"],
          "fullName": "Auth Config Customer Credentials Provider should return null for missing credentials",
          "status": "passed",
          "title": "should return null for missing credentials",
          "duration": 0.11387500000000728,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Customer Credentials Provider"],
          "fullName": "Auth Config Customer Credentials Provider should handle rate limiting",
          "status": "passed",
          "title": "should handle rate limiting",
          "duration": 0.10870799999975134,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Customer Credentials Provider"],
          "fullName": "Auth Config Customer Credentials Provider should return null for non-existent customer",
          "status": "passed",
          "title": "should return null for non-existent customer",
          "duration": 0.11679099999992104,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Customer Credentials Provider"],
          "fullName": "Auth Config Customer Credentials Provider should successfully authenticate customer",
          "status": "passed",
          "title": "should successfully authenticate customer",
          "duration": 0.20870800000011513,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Customer Credentials Provider"],
          "fullName": "Auth Config Customer Credentials Provider should use default name if customer name is null",
          "status": "passed",
          "title": "should use default name if customer name is null",
          "duration": 0.11129200000004857,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Callbacks"],
          "fullName": "Auth Config Callbacks should handle jwt callback correctly",
          "status": "passed",
          "title": "should handle jwt callback correctly",
          "duration": 0.11604200000010678,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Callbacks"],
          "fullName": "Auth Config Callbacks should handle jwt callback without user",
          "status": "passed",
          "title": "should handle jwt callback without user",
          "duration": 0.07270900000003166,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Config", "Callbacks"],
          "fullName": "Auth Config Callbacks should handle session callback correctly",
          "status": "passed",
          "title": "should handle session callback correctly",
          "duration": 0.10341600000037943,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052585,
      "endTime": 1754356052589.116,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/auth/config.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Rate Limiting", "checkRateLimit"],
          "fullName": "Rate Limiting checkRateLimit should allow first attempt",
          "status": "passed",
          "title": "should allow first attempt",
          "duration": 0.8555420000002414,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Rate Limiting", "checkRateLimit"],
          "fullName": "Rate Limiting checkRateLimit should allow attempts within limit",
          "status": "passed",
          "title": "should allow attempts within limit",
          "duration": 0.2545829999999114,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Rate Limiting", "checkRateLimit"],
          "fullName": "Rate Limiting checkRateLimit should block after max attempts",
          "status": "passed",
          "title": "should block after max attempts",
          "duration": 0.24254199999995762,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Rate Limiting", "checkRateLimit"],
          "fullName": "Rate Limiting checkRateLimit should calculate correct retry time during lockout",
          "status": "passed",
          "title": "should calculate correct retry time during lockout",
          "duration": 0.35287500000049477,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Rate Limiting", "checkRateLimit"],
          "fullName": "Rate Limiting checkRateLimit should allow access after lockout expires",
          "status": "passed",
          "title": "should allow access after lockout expires",
          "duration": 0.2240830000000642,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Rate Limiting", "checkRateLimit"],
          "fullName": "Rate Limiting checkRateLimit should reset attempts after time window expires",
          "status": "passed",
          "title": "should reset attempts after time window expires",
          "duration": 0.22066699999959383,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Rate Limiting", "recordLoginAttempt"],
          "fullName": "Rate Limiting recordLoginAttempt should clear attempts on successful login",
          "status": "passed",
          "title": "should clear attempts on successful login",
          "duration": 0.21070899999995163,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Rate Limiting", "recordLoginAttempt"],
          "fullName": "Rate Limiting recordLoginAttempt should increment count for failed attempts",
          "status": "passed",
          "title": "should increment count for failed attempts",
          "duration": 0.21983300000010786,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Rate Limiting", "recordLoginAttempt"],
          "fullName": "Rate Limiting recordLoginAttempt should reset count if window expired",
          "status": "passed",
          "title": "should reset count if window expired",
          "duration": 0.2225829999997586,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Rate Limiting", "cleanup interval"],
          "fullName": "Rate Limiting cleanup interval should clean up old entries",
          "status": "passed",
          "title": "should clean up old entries",
          "duration": 0.2704999999996289,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054953,
      "endTime": 1754356054955.2705,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/auth/rate-limit.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Auth Utils", "requireAdmin"],
          "fullName": "Auth Utils requireAdmin should return null for admin users",
          "status": "passed",
          "title": "should return null for admin users",
          "duration": 0.7173339999999371,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Utils", "requireAdmin"],
          "fullName": "Auth Utils requireAdmin should return 401 error for non-admin users",
          "status": "passed",
          "title": "should return 401 error for non-admin users",
          "duration": 0.24099999999998545,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Utils", "requireAdmin"],
          "fullName": "Auth Utils requireAdmin should return 401 error when no session exists",
          "status": "passed",
          "title": "should return 401 error when no session exists",
          "duration": 0.1687499999998181,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Auth Utils", "requireAdmin"],
          "fullName": "Auth Utils requireAdmin should handle session without role gracefully",
          "status": "passed",
          "title": "should handle session without role gracefully",
          "duration": 0.18320799999946757,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055683,
      "endTime": 1754356055684.241,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/auth/utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CastRepositoryImpl", "getAll"],
          "fullName": "CastRepositoryImpl getAll should fetch all casts successfully",
          "status": "passed",
          "title": "should fetch all casts successfully",
          "duration": 0.4361659999999574,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "getAll"],
          "fullName": "CastRepositoryImpl getAll should throw error when fetch fails",
          "status": "passed",
          "title": "should throw error when fetch fails",
          "duration": 0.29320800000004965,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "getById"],
          "fullName": "CastRepositoryImpl getById should fetch cast by id successfully",
          "status": "passed",
          "title": "should fetch cast by id successfully",
          "duration": 0.2621249999997417,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "getById"],
          "fullName": "CastRepositoryImpl getById should return null for 404 response",
          "status": "passed",
          "title": "should return null for 404 response",
          "duration": 0.2327909999999065,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "getById"],
          "fullName": "CastRepositoryImpl getById should throw error for other failures",
          "status": "passed",
          "title": "should throw error for other failures",
          "duration": 0.2701659999997901,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "create"],
          "fullName": "CastRepositoryImpl create should create cast successfully",
          "status": "passed",
          "title": "should create cast successfully",
          "duration": 0.31237499999997453,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "create"],
          "fullName": "CastRepositoryImpl create should throw error when create fails",
          "status": "passed",
          "title": "should throw error when create fails",
          "duration": 0.24870800000007875,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "update"],
          "fullName": "CastRepositoryImpl update should update cast successfully",
          "status": "passed",
          "title": "should update cast successfully",
          "duration": 0.27958300000000236,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "update"],
          "fullName": "CastRepositoryImpl update should throw error when update fails",
          "status": "passed",
          "title": "should throw error when update fails",
          "duration": 0.2446669999999358,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "delete"],
          "fullName": "CastRepositoryImpl delete should delete cast successfully",
          "status": "passed",
          "title": "should delete cast successfully",
          "duration": 0.2503340000002936,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "delete"],
          "fullName": "CastRepositoryImpl delete should throw error when delete fails",
          "status": "passed",
          "title": "should throw error when delete fails",
          "duration": 0.26529200000004494,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "getCastSchedule"],
          "fullName": "CastRepositoryImpl getCastSchedule should fetch schedules successfully",
          "status": "passed",
          "title": "should fetch schedules successfully",
          "duration": 0.3853339999996024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "getCastSchedule"],
          "fullName": "CastRepositoryImpl getCastSchedule should throw error when fetch fails",
          "status": "passed",
          "title": "should throw error when fetch fails",
          "duration": 0.3375829999999951,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "updateCastSchedule"],
          "fullName": "CastRepositoryImpl updateCastSchedule should update existing schedule successfully",
          "status": "passed",
          "title": "should update existing schedule successfully",
          "duration": 0.4120829999997113,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "updateCastSchedule"],
          "fullName": "CastRepositoryImpl updateCastSchedule should create new schedule when none exists",
          "status": "passed",
          "title": "should create new schedule when none exists",
          "duration": 0.31062500000007276,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastRepositoryImpl", "updateCastSchedule"],
          "fullName": "CastRepositoryImpl updateCastSchedule should throw error when update fails",
          "status": "passed",
          "title": "should throw error when update fails",
          "duration": 0.30587500000001455,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356053168,
      "endTime": 1754356053173.3105,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/cast/repository-impl.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CastUseCases", "getCastSchedule"],
          "fullName": "CastUseCases getCastSchedule should call repository's getCastSchedule and return the schedule",
          "status": "passed",
          "title": "should call repository's getCastSchedule and return the schedule",
          "duration": 0.2828749999998763,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastUseCases", "updateCastSchedule"],
          "fullName": "CastUseCases updateCastSchedule should call repository's updateCastSchedule with correct arguments",
          "status": "passed",
          "title": "should call repository's updateCastSchedule with correct arguments",
          "duration": 0.1492499999994834,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastUseCases", "getById (from BaseUseCasesImpl)"],
          "fullName": "CastUseCases getById (from BaseUseCasesImpl) should call repository's getById and return a cast",
          "status": "passed",
          "title": "should call repository's getById and return a cast",
          "duration": 0.13625000000047294,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055578,
      "endTime": 1754356055579.1492,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/cast/usecases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Schedule Errors"],
          "fullName": "Schedule Errors should create ScheduleNotFoundError with correct properties",
          "status": "passed",
          "title": "should create ScheduleNotFoundError with correct properties",
          "duration": 0.12162499999976717,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Errors"],
          "fullName": "Schedule Errors should create ShiftNotFoundError with correct properties",
          "status": "passed",
          "title": "should create ShiftNotFoundError with correct properties",
          "duration": 0.06445900000016991,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Errors"],
          "fullName": "Schedule Errors should create PatternNotFoundError with correct properties",
          "status": "passed",
          "title": "should create PatternNotFoundError with correct properties",
          "duration": 0.058958999999958905,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Errors"],
          "fullName": "Schedule Errors should create LeaveRequestNotFoundError with correct properties",
          "status": "passed",
          "title": "should create LeaveRequestNotFoundError with correct properties",
          "duration": 0.05633300000044983,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Errors"],
          "fullName": "Schedule Errors should create ShiftConflictError with correct properties",
          "status": "passed",
          "title": "should create ShiftConflictError with correct properties",
          "duration": 0.10662500000034925,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Errors"],
          "fullName": "Schedule Errors should create InvalidTimeFormatError with correct properties",
          "status": "passed",
          "title": "should create InvalidTimeFormatError with correct properties",
          "duration": 0.04879200000050332,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Errors"],
          "fullName": "Schedule Errors should create InvalidDateRangeError with correct properties",
          "status": "passed",
          "title": "should create InvalidDateRangeError with correct properties",
          "duration": 0.07150000000001455,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Errors"],
          "fullName": "Schedule Errors should create UnauthorizedScheduleOperationError with reason",
          "status": "passed",
          "title": "should create UnauthorizedScheduleOperationError with reason",
          "duration": 0.05570799999986775,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Errors"],
          "fullName": "Schedule Errors should create UnauthorizedScheduleOperationError without reason",
          "status": "passed",
          "title": "should create UnauthorizedScheduleOperationError without reason",
          "duration": 0.03491699999995035,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055409,
      "endTime": 1754356055409.1216,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/cast-schedule/errors.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Schedule Permissions", "canApproveLeaveRequest"],
          "fullName": "Schedule Permissions canApproveLeaveRequest should allow admin to approve leave requests",
          "status": "passed",
          "title": "should allow admin to approve leave requests",
          "duration": 0.17474999999922147,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canApproveLeaveRequest"],
          "fullName": "Schedule Permissions canApproveLeaveRequest should allow manager to approve leave requests",
          "status": "passed",
          "title": "should allow manager to approve leave requests",
          "duration": 0.07683300000007875,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canApproveLeaveRequest"],
          "fullName": "Schedule Permissions canApproveLeaveRequest should deny cast without permission",
          "status": "passed",
          "title": "should deny cast without permission",
          "duration": 0.0712919999996302,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canApproveLeaveRequest"],
          "fullName": "Schedule Permissions canApproveLeaveRequest should allow staff with specific permission",
          "status": "passed",
          "title": "should allow staff with specific permission",
          "duration": 0.07225000000016735,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canCreateSchedule"],
          "fullName": "Schedule Permissions canCreateSchedule should allow admin to create schedules",
          "status": "passed",
          "title": "should allow admin to create schedules",
          "duration": 0.08608300000014424,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canCreateSchedule"],
          "fullName": "Schedule Permissions canCreateSchedule should allow manager to create schedules",
          "status": "passed",
          "title": "should allow manager to create schedules",
          "duration": 0.0621659999997064,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canCreateSchedule"],
          "fullName": "Schedule Permissions canCreateSchedule should deny cast without permission",
          "status": "passed",
          "title": "should deny cast without permission",
          "duration": 0.060666999999739346,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canCreateSchedule"],
          "fullName": "Schedule Permissions canCreateSchedule should allow cast with specific permission",
          "status": "passed",
          "title": "should allow cast with specific permission",
          "duration": 0.06570800000008603,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canEditSchedule"],
          "fullName": "Schedule Permissions canEditSchedule should allow admin to edit any schedule",
          "status": "passed",
          "title": "should allow admin to edit any schedule",
          "duration": 0.116916000000856,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canEditSchedule"],
          "fullName": "Schedule Permissions canEditSchedule should allow manager to edit schedules",
          "status": "passed",
          "title": "should allow manager to edit schedules",
          "duration": 0.06866699999955017,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canEditSchedule"],
          "fullName": "Schedule Permissions canEditSchedule should allow cast to edit own schedule with permission",
          "status": "passed",
          "title": "should allow cast to edit own schedule with permission",
          "duration": 0.0650420000001759,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canEditSchedule"],
          "fullName": "Schedule Permissions canEditSchedule should deny cast to edit own schedule without permission",
          "status": "passed",
          "title": "should deny cast to edit own schedule without permission",
          "duration": 0.07516599999962637,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canEditSchedule"],
          "fullName": "Schedule Permissions canEditSchedule should deny cast to edit other cast schedule",
          "status": "passed",
          "title": "should deny cast to edit other cast schedule",
          "duration": 0.06524999999965075,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canDeleteSchedule"],
          "fullName": "Schedule Permissions canDeleteSchedule should allow only admin to delete schedules",
          "status": "passed",
          "title": "should allow only admin to delete schedules",
          "duration": 0.07916599999953178,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canDeleteSchedule"],
          "fullName": "Schedule Permissions canDeleteSchedule should deny manager to delete schedules",
          "status": "passed",
          "title": "should deny manager to delete schedules",
          "duration": 0.06354199999987031,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "canDeleteSchedule"],
          "fullName": "Schedule Permissions canDeleteSchedule should allow user with specific permission",
          "status": "passed",
          "title": "should allow user with specific permission",
          "duration": 0.06541599999945902,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Permissions", "checkPermission helper"],
          "fullName": "Schedule Permissions checkPermission helper should check permissions using helper function",
          "status": "passed",
          "title": "should check permissions using helper function",
          "duration": 0.15374999999949068,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054982,
      "endTime": 1754356054983.1538,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/cast-schedule/permissions.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Schedule operations"],
          "fullName": "CastScheduleRepositoryImpl Schedule operations should create and find a schedule",
          "status": "passed",
          "title": "should create and find a schedule",
          "duration": 0.16783299999997325,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Schedule operations"],
          "fullName": "CastScheduleRepositoryImpl Schedule operations should find schedules by cast ID and date range",
          "status": "passed",
          "title": "should find schedules by cast ID and date range",
          "duration": 0.10933299999987867,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Schedule operations"],
          "fullName": "CastScheduleRepositoryImpl Schedule operations should update a schedule",
          "status": "passed",
          "title": "should update a schedule",
          "duration": 11.177666999999929,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Schedule operations"],
          "fullName": "CastScheduleRepositoryImpl Schedule operations should delete a schedule",
          "status": "passed",
          "title": "should delete a schedule",
          "duration": 0.06125000000020009,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Shift operations"],
          "fullName": "CastScheduleRepositoryImpl Shift operations should create and manage shifts",
          "status": "passed",
          "title": "should create and manage shifts",
          "duration": 0.10833400000001348,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Shift operations"],
          "fullName": "CastScheduleRepositoryImpl Shift operations should update a shift",
          "status": "passed",
          "title": "should update a shift",
          "duration": 0.09108299999979863,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Pattern operations"],
          "fullName": "CastScheduleRepositoryImpl Pattern operations should create and find patterns",
          "status": "passed",
          "title": "should create and find patterns",
          "duration": 0.09354199999961565,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Pattern operations"],
          "fullName": "CastScheduleRepositoryImpl Pattern operations should apply pattern to date range",
          "status": "passed",
          "title": "should apply pattern to date range",
          "duration": 0.10733399999980975,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Leave request operations"],
          "fullName": "CastScheduleRepositoryImpl Leave request operations should create and manage leave requests",
          "status": "passed",
          "title": "should create and manage leave requests",
          "duration": 0.08487500000001091,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Leave request operations"],
          "fullName": "CastScheduleRepositoryImpl Leave request operations should approve leave request",
          "status": "passed",
          "title": "should approve leave request",
          "duration": 0.05558400000018082,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepositoryImpl", "Leave request operations"],
          "fullName": "CastScheduleRepositoryImpl Leave request operations should find pending leave requests",
          "status": "passed",
          "title": "should find pending leave requests",
          "duration": 0.07041700000036144,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054388,
      "endTime": 1754356054400.0703,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/cast-schedule/repository-impl.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CastScheduleRepository"],
          "fullName": "CastScheduleRepository should define repository interface",
          "status": "passed",
          "title": "should define repository interface",
          "duration": 0.11812499999996362,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleRepository"],
          "fullName": "CastScheduleRepository should handle schedule operations",
          "status": "passed",
          "title": "should handle schedule operations",
          "duration": 0.093166999999994,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055379,
      "endTime": 1754356055380.0933,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/cast-schedule/repository.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CastSchedule types"],
          "fullName": "CastSchedule types should create a valid Schedule",
          "status": "passed",
          "title": "should create a valid Schedule",
          "duration": 0.14070900000024267,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastSchedule types"],
          "fullName": "CastSchedule types should create a valid Shift",
          "status": "passed",
          "title": "should create a valid Shift",
          "duration": 0.06279200000062701,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastSchedule types"],
          "fullName": "CastSchedule types should handle schedule without breaks",
          "status": "passed",
          "title": "should handle schedule without breaks",
          "duration": 0.03666700000030687,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastSchedule types"],
          "fullName": "CastSchedule types should support different shift statuses",
          "status": "passed",
          "title": "should support different shift statuses",
          "duration": 0.04749999999967258,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastSchedule types"],
          "fullName": "CastSchedule types should create a valid SchedulePattern for regular patterns",
          "status": "passed",
          "title": "should create a valid SchedulePattern for regular patterns",
          "duration": 0.04170799999974406,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastSchedule types"],
          "fullName": "CastSchedule types should create a valid LeaveRequest",
          "status": "passed",
          "title": "should create a valid LeaveRequest",
          "duration": 0.05850000000009459,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055442,
      "endTime": 1754356055442.1406,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/cast-schedule/types.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CastScheduleUseCases", "getWeeklyScheduleView"],
          "fullName": "CastScheduleUseCases getWeeklyScheduleView should return weekly schedule view for all casts",
          "status": "passed",
          "title": "should return weekly schedule view for all casts",
          "duration": 1.263249999999971,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "createScheduleFromPattern"],
          "fullName": "CastScheduleUseCases createScheduleFromPattern should create schedules from pattern for a month",
          "status": "passed",
          "title": "should create schedules from pattern for a month",
          "duration": 0.4924590000000535,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "getScheduleStats"],
          "fullName": "CastScheduleUseCases getScheduleStats should calculate schedule statistics",
          "status": "passed",
          "title": "should calculate schedule statistics",
          "duration": 0.2331250000002001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "handleLeaveRequest"],
          "fullName": "CastScheduleUseCases handleLeaveRequest should handle leave request and update schedules",
          "status": "passed",
          "title": "should handle leave request and update schedules",
          "duration": 0.2380839999998443,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "handleLeaveRequest"],
          "fullName": "CastScheduleUseCases handleLeaveRequest should check permissions when handling leave request",
          "status": "passed",
          "title": "should check permissions when handling leave request",
          "duration": 0.6149579999998878,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "checkScheduleConflicts"],
          "fullName": "CastScheduleUseCases checkScheduleConflicts should detect schedule conflicts",
          "status": "passed",
          "title": "should detect schedule conflicts",
          "duration": 0.21895900000004076,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "checkScheduleConflicts"],
          "fullName": "CastScheduleUseCases checkScheduleConflicts should handle overnight shifts (crossing midnight)",
          "status": "passed",
          "title": "should handle overnight shifts (crossing midnight)",
          "duration": 0.1143329999999878,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "checkScheduleConflicts"],
          "fullName": "CastScheduleUseCases checkScheduleConflicts should detect conflicts between multiple overnight shifts",
          "status": "passed",
          "title": "should detect conflicts between multiple overnight shifts",
          "duration": 0.08762500000011642,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "getWeeklySchedule API integration"],
          "fullName": "CastScheduleUseCases getWeeklySchedule API integration should fetch and transform cast and schedule data from API",
          "status": "passed",
          "title": "should fetch and transform cast and schedule data from API",
          "duration": 1.9576669999999012,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "getWeeklySchedule API integration"],
          "fullName": "CastScheduleUseCases getWeeklySchedule API integration should handle API errors gracefully and fallback to mock data",
          "status": "passed",
          "title": "should handle API errors gracefully and fallback to mock data",
          "duration": 2.801249999999982,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "getWeeklySchedule API integration"],
          "fullName": "CastScheduleUseCases getWeeklySchedule API integration should handle empty data correctly",
          "status": "passed",
          "title": "should handle empty data correctly",
          "duration": 0.17491599999993923,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CastScheduleUseCases", "getWeeklySchedule API integration"],
          "fullName": "CastScheduleUseCases getWeeklySchedule API integration should calculate statistics correctly",
          "status": "passed",
          "title": "should calculate statistics correctly",
          "duration": 0.3600409999999101,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052335,
      "endTime": 1754356052344.36,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/cast-schedule/usecases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Schedule Utils", "formatScheduleDate"],
          "fullName": "Schedule Utils formatScheduleDate should format date as yyyy-MM-dd",
          "status": "passed",
          "title": "should format date as yyyy-MM-dd",
          "duration": 0.09570899999926041,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "formatDisplayDate"],
          "fullName": "Schedule Utils formatDisplayDate should format date as MM/dd",
          "status": "passed",
          "title": "should format date as MM/dd",
          "duration": 0.06029099999977916,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "formatDayOfWeek"],
          "fullName": "Schedule Utils formatDayOfWeek should format day of week in Japanese",
          "status": "passed",
          "title": "should format day of week in Japanese",
          "duration": 0.08762500000011642,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "getWeekDates"],
          "fullName": "Schedule Utils getWeekDates should return 7 consecutive dates starting from given date",
          "status": "passed",
          "title": "should return 7 consecutive dates starting from given date",
          "duration": 0.10279199999968114,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "validateTimeFormat"],
          "fullName": "Schedule Utils validateTimeFormat should validate correct time formats",
          "status": "passed",
          "title": "should validate correct time formats",
          "duration": 0.052458000000115135,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "validateTimeFormat"],
          "fullName": "Schedule Utils validateTimeFormat should reject invalid time formats",
          "status": "passed",
          "title": "should reject invalid time formats",
          "duration": 0.07441600000038306,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "parseTime"],
          "fullName": "Schedule Utils parseTime should parse valid time string",
          "status": "passed",
          "title": "should parse valid time string",
          "duration": 0.07449999999971624,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "parseTime"],
          "fullName": "Schedule Utils parseTime should throw error for invalid time format",
          "status": "passed",
          "title": "should throw error for invalid time format",
          "duration": 0.09295900000051915,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "timeToMinutes"],
          "fullName": "Schedule Utils timeToMinutes should convert time to minutes",
          "status": "passed",
          "title": "should convert time to minutes",
          "duration": 0.053374999999505235,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "minutesToTime"],
          "fullName": "Schedule Utils minutesToTime should convert minutes to time format",
          "status": "passed",
          "title": "should convert minutes to time format",
          "duration": 0.05875000000014552,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "isTimeOverlapping"],
          "fullName": "Schedule Utils isTimeOverlapping should detect overlapping time ranges",
          "status": "passed",
          "title": "should detect overlapping time ranges",
          "duration": 0.06075000000055297,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "isTimeOverlapping"],
          "fullName": "Schedule Utils isTimeOverlapping should detect non-overlapping time ranges",
          "status": "passed",
          "title": "should detect non-overlapping time ranges",
          "duration": 0.03400000000056025,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schedule Utils", "isTimeOverlapping"],
          "fullName": "Schedule Utils isTimeOverlapping should handle overnight shifts",
          "status": "passed",
          "title": "should handle overnight shifts",
          "duration": 0.051541000000725035,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055039,
      "endTime": 1754356055040.0608,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/cast-schedule/utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Chat Utils", "getCustomers"],
          "fullName": "Chat Utils getCustomers should return all customers from data",
          "status": "passed",
          "title": "should return all customers from data",
          "duration": 0.1358330000002752,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat Utils", "getCustomers"],
          "fullName": "Chat Utils getCustomers should return the same array reference from data",
          "status": "passed",
          "title": "should return the same array reference from data",
          "duration": 0.03504199999952107,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055777,
      "endTime": 1754356055777.1357,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/chat/utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Course Option Data"],
          "fullName": "Course Option Data should export getCourses function",
          "status": "passed",
          "title": "should export getCourses function",
          "duration": 0.04879200000050332,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Data"],
          "fullName": "Course Option Data should export getOptions function",
          "status": "passed",
          "title": "should export getOptions function",
          "duration": 0.030082999999649473,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Data"],
          "fullName": "Course Option Data should export courses array",
          "status": "passed",
          "title": "should export courses array",
          "duration": 0.030125000000225555,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Data"],
          "fullName": "Course Option Data should export options array",
          "status": "passed",
          "title": "should export options array",
          "duration": 0.028083000000151515,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055920,
      "endTime": 1754356055920.0488,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/course-option/data.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Course Option Utils", "getCourseById"],
          "fullName": "Course Option Utils getCourseById should return the course when found",
          "status": "passed",
          "title": "should return the course when found",
          "duration": 0.08954199999971024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Utils", "getCourseById"],
          "fullName": "Course Option Utils getCourseById should return undefined when course not found",
          "status": "passed",
          "title": "should return undefined when course not found",
          "duration": 0.03320799999983137,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Utils", "getCourseById"],
          "fullName": "Course Option Utils getCourseById should handle empty string id",
          "status": "passed",
          "title": "should handle empty string id",
          "duration": 0.02829100000053586,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Utils", "getOptionById"],
          "fullName": "Course Option Utils getOptionById should return the option when found",
          "status": "passed",
          "title": "should return the option when found",
          "duration": 0.05045799999970768,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Utils", "getOptionById"],
          "fullName": "Course Option Utils getOptionById should return undefined when option not found",
          "status": "passed",
          "title": "should return undefined when option not found",
          "duration": 0.027374999999665306,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Utils", "getOptionById"],
          "fullName": "Course Option Utils getOptionById should handle empty string id",
          "status": "passed",
          "title": "should handle empty string id",
          "duration": 0.026291999999557447,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Utils", "getOptionByIdAsync"],
          "fullName": "Course Option Utils getOptionByIdAsync should return the option when found",
          "status": "passed",
          "title": "should return the option when found",
          "duration": 0.3641250000000582,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Utils", "getOptionByIdAsync"],
          "fullName": "Course Option Utils getOptionByIdAsync should return undefined when option not found",
          "status": "passed",
          "title": "should return undefined when option not found",
          "duration": 0.123541999999361,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Utils", "getOptionByIdAsync"],
          "fullName": "Course Option Utils getOptionByIdAsync should handle empty options array",
          "status": "passed",
          "title": "should handle empty options array",
          "duration": 0.11316700000043056,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course Option Utils", "getOptionByIdAsync"],
          "fullName": "Course Option Utils getOptionByIdAsync should call getOptions to get latest data",
          "status": "passed",
          "title": "should call getOptions to get latest data",
          "duration": 0.1184160000002521,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055468,
      "endTime": 1754356055469.1184,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/course-option/utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "getAll"],
          "fullName": "CustomerRepositoryImpl getAll should fetch all customers successfully",
          "status": "passed",
          "title": "should fetch all customers successfully",
          "duration": 0.7875840000001517,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "getAll"],
          "fullName": "CustomerRepositoryImpl getAll should throw error when fetch fails",
          "status": "passed",
          "title": "should throw error when fetch fails",
          "duration": 0.3668330000000424,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "getById"],
          "fullName": "CustomerRepositoryImpl getById should fetch customer by id successfully",
          "status": "passed",
          "title": "should fetch customer by id successfully",
          "duration": 0.3187910000001466,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "getById"],
          "fullName": "CustomerRepositoryImpl getById should return null for 404 response",
          "status": "passed",
          "title": "should return null for 404 response",
          "duration": 0.27475000000004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "getById"],
          "fullName": "CustomerRepositoryImpl getById should throw error for other failures",
          "status": "passed",
          "title": "should throw error for other failures",
          "duration": 0.29908400000022084,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "getCustomerByPhone"],
          "fullName": "CustomerRepositoryImpl getCustomerByPhone should return null and log warning",
          "status": "passed",
          "title": "should return null and log warning",
          "duration": 0.2916250000002947,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "findByEmail"],
          "fullName": "CustomerRepositoryImpl findByEmail should fetch customer by email successfully",
          "status": "passed",
          "title": "should fetch customer by email successfully",
          "duration": 0.306999999999789,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "findByEmail"],
          "fullName": "CustomerRepositoryImpl findByEmail should return null for 404 response",
          "status": "passed",
          "title": "should return null for 404 response",
          "duration": 0.27462500000001455,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "findByEmail"],
          "fullName": "CustomerRepositoryImpl findByEmail should throw error for other failures",
          "status": "passed",
          "title": "should throw error for other failures",
          "duration": 0.3065420000002632,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "findByEmail"],
          "fullName": "CustomerRepositoryImpl findByEmail should properly encode email with special characters",
          "status": "passed",
          "title": "should properly encode email with special characters",
          "duration": 0.2845420000003287,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "create"],
          "fullName": "CustomerRepositoryImpl create should create customer successfully",
          "status": "passed",
          "title": "should create customer successfully",
          "duration": 0.34916599999996834,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "create"],
          "fullName": "CustomerRepositoryImpl create should throw error when create fails",
          "status": "passed",
          "title": "should throw error when create fails",
          "duration": 0.3009580000002643,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "update"],
          "fullName": "CustomerRepositoryImpl update should update customer successfully",
          "status": "passed",
          "title": "should update customer successfully",
          "duration": 0.3297090000000935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "update"],
          "fullName": "CustomerRepositoryImpl update should throw error when update fails",
          "status": "passed",
          "title": "should throw error when update fails",
          "duration": 0.3067080000000715,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "delete"],
          "fullName": "CustomerRepositoryImpl delete should delete customer successfully",
          "status": "passed",
          "title": "should delete customer successfully",
          "duration": 0.3215420000001359,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerRepositoryImpl", "delete"],
          "fullName": "CustomerRepositoryImpl delete should return false when delete fails",
          "status": "passed",
          "title": "should return false when delete fails",
          "duration": 0.27462500000001455,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054499,
      "endTime": 1754356054504.3215,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/customer/repository-impl.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CustomerUseCases", "getById"],
          "fullName": "CustomerUseCases getById should call repository's getById and return a customer",
          "status": "passed",
          "title": "should call repository's getById and return a customer",
          "duration": 0.4005830000005517,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerUseCases", "getCustomerByPhone"],
          "fullName": "CustomerUseCases getCustomerByPhone should call repository's getCustomerByPhone and return a customer",
          "status": "passed",
          "title": "should call repository's getCustomerByPhone and return a customer",
          "duration": 0.16529200000059063,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerUseCases", "getAll"],
          "fullName": "CustomerUseCases getAll should call repository's getAll and return all customers",
          "status": "passed",
          "title": "should call repository's getAll and return all customers",
          "duration": 0.14404099999956088,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerUseCases", "create"],
          "fullName": "CustomerUseCases create should call repository's create with correct data",
          "status": "passed",
          "title": "should call repository's create with correct data",
          "duration": 0.1514999999999418,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerUseCases", "update"],
          "fullName": "CustomerUseCases update should call repository's update with correct data",
          "status": "passed",
          "title": "should call repository's update with correct data",
          "duration": 0.1492500000003929,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CustomerUseCases", "delete"],
          "fullName": "CustomerUseCases delete should call repository's delete with correct id",
          "status": "passed",
          "title": "should call repository's delete with correct id",
          "duration": 0.1628340000006574,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055431,
      "endTime": 1754356055432.1628,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/customer/usecases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Customer Utils", "calculateAge"],
          "fullName": "Customer Utils calculateAge should calculate age correctly when birthday has passed this year",
          "status": "passed",
          "title": "should calculate age correctly when birthday has passed this year",
          "duration": 0.1845419999999649,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer Utils", "calculateAge"],
          "fullName": "Customer Utils calculateAge should calculate age correctly when birthday has not passed this year",
          "status": "passed",
          "title": "should calculate age correctly when birthday has not passed this year",
          "duration": 0.07237500000064756,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer Utils", "calculateAge"],
          "fullName": "Customer Utils calculateAge should calculate age correctly on birthday",
          "status": "passed",
          "title": "should calculate age correctly on birthday",
          "duration": 0.054457999999613094,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer Utils", "calculateAge"],
          "fullName": "Customer Utils calculateAge should calculate age correctly for leap year birthdays",
          "status": "passed",
          "title": "should calculate age correctly for leap year birthdays",
          "duration": 0.05079200000000128,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer Utils", "calculateAge"],
          "fullName": "Customer Utils calculateAge should handle future dates (negative age)",
          "status": "passed",
          "title": "should handle future dates (negative age)",
          "duration": 0.05233399999997346,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer Utils", "calculateAge"],
          "fullName": "Customer Utils calculateAge should calculate age for someone born today",
          "status": "passed",
          "title": "should calculate age for someone born today",
          "duration": 0.04958299999998417,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055754,
      "endTime": 1754356055754.1846,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/customer/utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["DailySalesUseCases", "getDailySales"],
          "fullName": "DailySalesUseCases getDailySales should return daily sales data for a specific date",
          "status": "passed",
          "title": "should return daily sales data for a specific date",
          "duration": 0.17312500000025466,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DailySalesUseCases", "getDailySales"],
          "fullName": "DailySalesUseCases getDailySales should handle dates with no sales data",
          "status": "passed",
          "title": "should handle dates with no sales data",
          "duration": 0.09220800000002782,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DailySalesUseCases", "getDailySales"],
          "fullName": "DailySalesUseCases getDailySales should handle future dates",
          "status": "passed",
          "title": "should handle future dates",
          "duration": 0.08337499999970532,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DailySalesUseCases", "updateDailySales"],
          "fullName": "DailySalesUseCases updateDailySales should update daily sales data",
          "status": "passed",
          "title": "should update daily sales data",
          "duration": 0.09695800000008603,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DailySalesUseCases", "updateDailySales"],
          "fullName": "DailySalesUseCases updateDailySales should handle updating empty sales data",
          "status": "passed",
          "title": "should handle updating empty sales data",
          "duration": 0.06524999999965075,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DailySalesUseCases", "updateDailySales"],
          "fullName": "DailySalesUseCases updateDailySales should validate that cash + card sales equal total sales",
          "status": "passed",
          "title": "should validate that cash + card sales equal total sales",
          "duration": 0.07666699999981574,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356053106,
      "endTime": 1754356053106.173,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/daily-sales/usecases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Email Client", "send"],
          "fullName": "Email Client send should be a mocked function that returns { error: null }",
          "status": "passed",
          "title": "should be a mocked function that returns { error: null }",
          "duration": 0.36970800000017334,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Email Client", "send"],
          "fullName": "Email Client send should be called with the correct parameters",
          "status": "passed",
          "title": "should be called with the correct parameters",
          "duration": 0.1586669999996957,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Email Client", "send"],
          "fullName": "Email Client send should handle multiple calls",
          "status": "passed",
          "title": "should handle multiple calls",
          "duration": 0.16904199999953562,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055743,
      "endTime": 1754356055743.3696,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/email/client.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["NotificationService", "sendReservationConfirmation"],
          "fullName": "NotificationService sendReservationConfirmation should send email notification when enabled",
          "status": "passed",
          "title": "should send email notification when enabled",
          "duration": 8.517291000000114,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["NotificationService", "sendReservationConfirmation"],
          "fullName": "NotificationService sendReservationConfirmation should send SMS notification when enabled",
          "status": "passed",
          "title": "should send SMS notification when enabled",
          "duration": 0.22870800000009694,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["NotificationService", "sendReservationConfirmation"],
          "fullName": "NotificationService sendReservationConfirmation should send push notification when enabled",
          "status": "passed",
          "title": "should send push notification when enabled",
          "duration": 0.19320799999968585,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["NotificationService", "sendReservationConfirmation"],
          "fullName": "NotificationService sendReservationConfirmation should skip notifications based on customer preferences",
          "status": "passed",
          "title": "should skip notifications based on customer preferences",
          "duration": 0.16954200000009223,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["NotificationService", "sendReservationModification"],
          "fullName": "NotificationService sendReservationModification should send modification notifications with old and new times",
          "status": "passed",
          "title": "should send modification notifications with old and new times",
          "duration": 0.2976250000001528,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["NotificationService", "sendReservationCancellation"],
          "fullName": "NotificationService sendReservationCancellation should send cancellation notifications",
          "status": "passed",
          "title": "should send cancellation notifications",
          "duration": 0.29141699999991033,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["NotificationService", "sendBulkNotifications"],
          "fullName": "NotificationService sendBulkNotifications should handle errors gracefully and continue sending",
          "status": "passed",
          "title": "should handle errors gracefully and continue sending",
          "duration": 0.29287499999963984,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["NotificationService", "getNotificationHistory"],
          "fullName": "NotificationService getNotificationHistory should retrieve notification history for a reservation",
          "status": "passed",
          "title": "should retrieve notification history for a reservation",
          "duration": 0.1461659999999938,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["NotificationService", "retryFailedNotifications"],
          "fullName": "NotificationService retryFailedNotifications should retry failed notifications",
          "status": "passed",
          "title": "should retry failed notifications",
          "duration": 0.1554999999998472,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["NotificationService", "retryFailedNotifications"],
          "fullName": "NotificationService retryFailedNotifications should mark notifications as permanently failed after max retries",
          "status": "passed",
          "title": "should mark notifications as permanently failed after max retries",
          "duration": 0.10487499999999272,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356053122,
      "endTime": 1754356053132.1555,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/notification/service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Options Data", "getOptionById"],
          "fullName": "Options Data getOptionById should return option when found by direct ID",
          "status": "passed",
          "title": "should return option when found by direct ID",
          "duration": 0.089708000000428,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Options Data", "getOptionById"],
          "fullName": "Options Data getOptionById should return option when found by mapped ID",
          "status": "passed",
          "title": "should return option when found by mapped ID",
          "duration": 0.0435829999996713,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Options Data", "getOptionById"],
          "fullName": "Options Data getOptionById should return option for shampoo-spa mapped ID",
          "status": "passed",
          "title": "should return option for shampoo-spa mapped ID",
          "duration": 0.033999999999650754,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Options Data", "getOptionById"],
          "fullName": "Options Data getOptionById should return option for extension mapped ID",
          "status": "passed",
          "title": "should return option for extension mapped ID",
          "duration": 0.0305000000007567,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Options Data", "getOptionById"],
          "fullName": "Options Data getOptionById should return undefined when option not found",
          "status": "passed",
          "title": "should return undefined when option not found",
          "duration": 0.025082999999540334,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Options Data", "getOptionById"],
          "fullName": "Options Data getOptionById should return undefined for invalid mapped ID",
          "status": "passed",
          "title": "should return undefined for invalid mapped ID",
          "duration": 0.024540999999771884,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Options Data", "getOptionById"],
          "fullName": "Options Data getOptionById should handle empty string ID",
          "status": "passed",
          "title": "should handle empty string ID",
          "duration": 0.023333000000093307,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055698,
      "endTime": 1754356055698.0896,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/options/data.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PricingUseCases", "Course management", "getCourses"],
          "fullName": "PricingUseCases Course management getCourses should return courses from repository",
          "status": "passed",
          "title": "should return courses from repository",
          "duration": 0.24420899999995527,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "Course management", "getCourseById"],
          "fullName": "PricingUseCases Course management getCourseById should return course by id",
          "status": "passed",
          "title": "should return course by id",
          "duration": 0.18270799999982046,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "Course management", "getCourseById"],
          "fullName": "PricingUseCases Course management getCourseById should return null when course not found",
          "status": "passed",
          "title": "should return null when course not found",
          "duration": 0.12954199999967386,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "Course management", "toggleCourseStatus"],
          "fullName": "PricingUseCases Course management toggleCourseStatus should toggle course status from active to inactive",
          "status": "passed",
          "title": "should toggle course status from active to inactive",
          "duration": 0.26237499999979264,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "Course management", "toggleCourseStatus"],
          "fullName": "PricingUseCases Course management toggleCourseStatus should throw error when course not found",
          "status": "passed",
          "title": "should throw error when course not found",
          "duration": 0.15254200000026685,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "Option management", "getOptions"],
          "fullName": "PricingUseCases Option management getOptions should return options from repository",
          "status": "passed",
          "title": "should return options from repository",
          "duration": 0.1264169999999467,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "Option management", "toggleOptionStatus"],
          "fullName": "PricingUseCases Option management toggleOptionStatus should toggle option status from inactive to active",
          "status": "passed",
          "title": "should toggle option status from inactive to active",
          "duration": 0.1505000000001928,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "Option management", "toggleOptionStatus"],
          "fullName": "PricingUseCases Option management toggleOptionStatus should throw error when option not found",
          "status": "passed",
          "title": "should throw error when option not found",
          "duration": 0.13462500000014188,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "calculateTotalPrice"],
          "fullName": "PricingUseCases calculateTotalPrice should calculate total price with course and options",
          "status": "passed",
          "title": "should calculate total price with course and options",
          "duration": 0.19425000000001091,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "calculateTotalPrice"],
          "fullName": "PricingUseCases calculateTotalPrice should apply late night fee when applicable",
          "status": "passed",
          "title": "should apply late night fee when applicable",
          "duration": 0.13570899999967878,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "calculateTotalPrice"],
          "fullName": "PricingUseCases calculateTotalPrice should return 0 when course not found",
          "status": "passed",
          "title": "should return 0 when course not found",
          "duration": 0.09858399999984613,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineCourseCategory"],
          "fullName": "PricingUseCases determineCourseCategory should determine VIP category for VIP courses",
          "status": "passed",
          "title": "should determine VIP category for VIP courses",
          "duration": 0.10220799999979135,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineCourseCategory"],
          "fullName": "PricingUseCases determineCourseCategory should determine VIP category for high-priced courses",
          "status": "passed",
          "title": "should determine VIP category for high-priced courses",
          "duration": 0.09758299999975861,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineCourseCategory"],
          "fullName": "PricingUseCases determineCourseCategory should determine premium category for premium courses",
          "status": "passed",
          "title": "should determine premium category for premium courses",
          "duration": 0.09704099999999016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineCourseCategory"],
          "fullName": "PricingUseCases determineCourseCategory should determine premium category for mid-priced courses",
          "status": "passed",
          "title": "should determine premium category for mid-priced courses",
          "duration": 0.09537500000033106,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineCourseCategory"],
          "fullName": "PricingUseCases determineCourseCategory should determine standard category for regular courses",
          "status": "passed",
          "title": "should determine standard category for regular courses",
          "duration": 0.10679099999970276,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineOptionCategory"],
          "fullName": "PricingUseCases determineOptionCategory should determine extension category",
          "status": "passed",
          "title": "should determine extension category",
          "duration": 0.12216699999999037,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineOptionCategory"],
          "fullName": "PricingUseCases determineOptionCategory should determine relaxation category for hot stone",
          "status": "passed",
          "title": "should determine relaxation category for hot stone",
          "duration": 0.18854099999998652,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineOptionCategory"],
          "fullName": "PricingUseCases determineOptionCategory should determine relaxation category for aroma",
          "status": "passed",
          "title": "should determine relaxation category for aroma",
          "duration": 0.17520899999999529,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineOptionCategory"],
          "fullName": "PricingUseCases determineOptionCategory should determine body-care category for neck treatment",
          "status": "passed",
          "title": "should determine body-care category for neck treatment",
          "duration": 0.16550000000006548,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineOptionCategory"],
          "fullName": "PricingUseCases determineOptionCategory should determine body-care category for body treatment",
          "status": "passed",
          "title": "should determine body-care category for body treatment",
          "duration": 0.11816700000008495,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PricingUseCases", "determineOptionCategory"],
          "fullName": "PricingUseCases determineOptionCategory should determine special category for others",
          "status": "passed",
          "title": "should determine special category for others",
          "duration": 0.10454200000003766,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052554,
      "endTime": 1754356052557.1753,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/pricing/usecases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Push Client", "send"],
          "fullName": "Push Client send should log the push notification details",
          "status": "passed",
          "title": "should log the push notification details",
          "duration": 0.5247499999995853,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Push Client", "send"],
          "fullName": "Push Client send should return success with a unique ID",
          "status": "passed",
          "title": "should return success with a unique ID",
          "duration": 0.25508300000001327,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Push Client", "send"],
          "fullName": "Push Client send should generate different IDs for different notifications",
          "status": "passed",
          "title": "should generate different IDs for different notifications",
          "duration": 0.2682920000006561,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Push Client", "send"],
          "fullName": "Push Client send should handle notifications with additional data",
          "status": "passed",
          "title": "should handle notifications with additional data",
          "duration": 0.20595799999955489,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Push Client", "send"],
          "fullName": "Push Client send should handle empty title and body",
          "status": "passed",
          "title": "should handle empty title and body",
          "duration": 0.19879200000013952,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Push Client", "send"],
          "fullName": "Push Client send should handle long title and body",
          "status": "passed",
          "title": "should handle long title and body",
          "duration": 0.21745800000007875,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Push Client", "send"],
          "fullName": "Push Client send should handle special characters in content",
          "status": "passed",
          "title": "should handle special characters in content",
          "duration": 0.18979200000012497,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055050,
      "endTime": 1754356055052.2175,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/push/client.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["generateDailyReport"],
          "fullName": "generateDailyReport should generate a daily report with valid structure",
          "status": "passed",
          "title": "should generate a daily report with valid structure",
          "duration": 0.1538749999999709,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["generateDailyReport"],
          "fullName": "generateDailyReport should generate staff reports with valid data",
          "status": "passed",
          "title": "should generate staff reports with valid data",
          "duration": 0.5200000000004366,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["generateDailyReport"],
          "fullName": "generateDailyReport should calculate totals correctly",
          "status": "passed",
          "title": "should calculate totals correctly",
          "duration": 0.05904199999986304,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["generateDailyReport"],
          "fullName": "generateDailyReport should generate different reports for different calls",
          "status": "passed",
          "title": "should generate different reports for different calls",
          "duration": 0.032584000000497326,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["generateDailyReport"],
          "fullName": "generateDailyReport should handle different date formats",
          "status": "passed",
          "title": "should handle different date formats",
          "duration": 0.06641600000057224,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055455,
      "endTime": 1754356055456.0664,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/report/usecases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getAll"],
          "fullName": "ReservationRepositoryImpl getAll should fetch all reservations successfully",
          "status": "passed",
          "title": "should fetch all reservations successfully",
          "duration": 0.19862499999999272,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getAll"],
          "fullName": "ReservationRepositoryImpl getAll should throw error when fetch fails",
          "status": "passed",
          "title": "should throw error when fetch fails",
          "duration": 0.11291700000015226,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getById"],
          "fullName": "ReservationRepositoryImpl getById should fetch reservation by id successfully",
          "status": "passed",
          "title": "should fetch reservation by id successfully",
          "duration": 0.10020900000017718,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getById"],
          "fullName": "ReservationRepositoryImpl getById should return null for 404 response",
          "status": "passed",
          "title": "should return null for 404 response",
          "duration": 0.06066699999996672,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getById"],
          "fullName": "ReservationRepositoryImpl getById should throw error for other failures",
          "status": "passed",
          "title": "should throw error for other failures",
          "duration": 0.09604100000001381,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "create"],
          "fullName": "ReservationRepositoryImpl create should create reservation successfully",
          "status": "passed",
          "title": "should create reservation successfully",
          "duration": 0.22154199999999946,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "create"],
          "fullName": "ReservationRepositoryImpl create should handle 409 conflict with conflict information",
          "status": "passed",
          "title": "should handle 409 conflict with conflict information",
          "duration": 0.12487499999997453,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "create"],
          "fullName": "ReservationRepositoryImpl create should throw generic error for other failures",
          "status": "passed",
          "title": "should throw generic error for other failures",
          "duration": 0.1063329999999496,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "update"],
          "fullName": "ReservationRepositoryImpl update should update reservation successfully",
          "status": "passed",
          "title": "should update reservation successfully",
          "duration": 0.13683300000002419,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "update"],
          "fullName": "ReservationRepositoryImpl update should handle 409 conflict on update",
          "status": "passed",
          "title": "should handle 409 conflict on update",
          "duration": 0.0907079999999496,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "update"],
          "fullName": "ReservationRepositoryImpl update should throw error for other update failures",
          "status": "passed",
          "title": "should throw error for other update failures",
          "duration": 0.09262499999999818,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "delete"],
          "fullName": "ReservationRepositoryImpl delete should delete reservation successfully",
          "status": "passed",
          "title": "should delete reservation successfully",
          "duration": 0.08745799999996962,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "delete"],
          "fullName": "ReservationRepositoryImpl delete should throw error when delete fails",
          "status": "passed",
          "title": "should throw error when delete fails",
          "duration": 0.08958300000017516,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getReservationsByCustomer"],
          "fullName": "ReservationRepositoryImpl getReservationsByCustomer should fetch reservations by customer id successfully",
          "status": "passed",
          "title": "should fetch reservations by customer id successfully",
          "duration": 0.09308299999997871,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getReservationsByCustomer"],
          "fullName": "ReservationRepositoryImpl getReservationsByCustomer should throw error when fetch fails",
          "status": "passed",
          "title": "should throw error when fetch fails",
          "duration": 0.08033300000010968,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getReservationsByStaff"],
          "fullName": "ReservationRepositoryImpl getReservationsByStaff should fetch reservations by staff id successfully",
          "status": "passed",
          "title": "should fetch reservations by staff id successfully",
          "duration": 0.3286669999999958,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getReservationsByStaff"],
          "fullName": "ReservationRepositoryImpl getReservationsByStaff should throw error when fetch fails",
          "status": "passed",
          "title": "should throw error when fetch fails",
          "duration": 0.11774999999988722,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getServices"],
          "fullName": "ReservationRepositoryImpl getServices should fetch and transform services successfully",
          "status": "passed",
          "title": "should fetch and transform services successfully",
          "duration": 0.18724999999994907,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getServices"],
          "fullName": "ReservationRepositoryImpl getServices should throw error when fetching services fails",
          "status": "passed",
          "title": "should throw error when fetching services fails",
          "duration": 0.07758300000000418,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "checkAvailability"],
          "fullName": "ReservationRepositoryImpl checkAvailability should check availability successfully",
          "status": "passed",
          "title": "should check availability successfully",
          "duration": 0.1440420000001268,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "checkAvailability"],
          "fullName": "ReservationRepositoryImpl checkAvailability should return conflicts when not available",
          "status": "passed",
          "title": "should return conflicts when not available",
          "duration": 0.10129200000005767,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "checkAvailability"],
          "fullName": "ReservationRepositoryImpl checkAvailability should throw error when check fails",
          "status": "passed",
          "title": "should throw error when check fails",
          "duration": 0.13408299999991868,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getAvailableSlots"],
          "fullName": "ReservationRepositoryImpl getAvailableSlots should fetch available slots successfully",
          "status": "passed",
          "title": "should fetch available slots successfully",
          "duration": 0.15462499999989632,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getAvailableSlots"],
          "fullName": "ReservationRepositoryImpl getAvailableSlots should return empty array when no slots available",
          "status": "passed",
          "title": "should return empty array when no slots available",
          "duration": 0.09083299999997507,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationRepositoryImpl", "getAvailableSlots"],
          "fullName": "ReservationRepositoryImpl getAvailableSlots should throw error when fetch fails",
          "status": "passed",
          "title": "should throw error when fetch fails",
          "duration": 0.09754099999986465,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052460,
      "endTime": 1754356052464.0977,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/reservation/repository-impl.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ReservationUseCases", "getReservationsByCustomer"],
          "fullName": "ReservationUseCases getReservationsByCustomer should return reservations for a specific customer",
          "status": "passed",
          "title": "should return reservations for a specific customer",
          "duration": 0.2047500000007858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationUseCases", "getReservationsByCustomer"],
          "fullName": "ReservationUseCases getReservationsByCustomer should return empty array when no reservations found",
          "status": "passed",
          "title": "should return empty array when no reservations found",
          "duration": 0.08729099999982282,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationUseCases", "getReservationsByStaff"],
          "fullName": "ReservationUseCases getReservationsByStaff should return reservations for a specific staff within date range",
          "status": "passed",
          "title": "should return reservations for a specific staff within date range",
          "duration": 0.1054999999996653,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationUseCases", "getReservationsByStaff"],
          "fullName": "ReservationUseCases getReservationsByStaff should handle empty date range",
          "status": "passed",
          "title": "should handle empty date range",
          "duration": 0.08479199999965203,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationUseCases", "getServices"],
          "fullName": "ReservationUseCases getServices should return all available services",
          "status": "passed",
          "title": "should return all available services",
          "duration": 0.08525000000008731,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ReservationUseCases", "getServices"],
          "fullName": "ReservationUseCases getServices should return empty array when no services available",
          "status": "passed",
          "title": "should return empty array when no services available",
          "duration": 0.07074999999986176,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055012,
      "endTime": 1754356055012.2048,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/reservation/usecases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["BaseUseCasesImpl", "getAll"],
          "fullName": "BaseUseCasesImpl getAll should call repository.getAll and return the result",
          "status": "passed",
          "title": "should call repository.getAll and return the result",
          "duration": 0.3215829999999187,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["BaseUseCasesImpl", "getById"],
          "fullName": "BaseUseCasesImpl getById should call repository.getById and return the result",
          "status": "passed",
          "title": "should call repository.getById and return the result",
          "duration": 0.17766600000049948,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["BaseUseCasesImpl", "create"],
          "fullName": "BaseUseCasesImpl create should call repository.create with the entity data and return the created entity",
          "status": "passed",
          "title": "should call repository.create with the entity data and return the created entity",
          "duration": 0.16062499999952706,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["BaseUseCasesImpl", "update"],
          "fullName": "BaseUseCasesImpl update should call repository.update with the id and entity data and return the updated entity",
          "status": "passed",
          "title": "should call repository.update with the id and entity data and return the updated entity",
          "duration": 0.1531249999998181,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["BaseUseCasesImpl", "delete"],
          "fullName": "BaseUseCasesImpl delete should call repository.delete with the id and return the result",
          "status": "passed",
          "title": "should call repository.delete with the id and return the result",
          "duration": 0.14254100000016479,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055488,
      "endTime": 1754356055489.1606,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/shared/base-usecases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Shared Utilities", "generateId"],
          "fullName": "Shared Utilities generateId should generate a unique string ID",
          "status": "passed",
          "title": "should generate a unique string ID",
          "duration": 0.07908300000053714,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatCurrency"],
          "fullName": "Shared Utilities formatCurrency should format a number into Japanese currency format",
          "status": "passed",
          "title": "should format a number into Japanese currency format",
          "duration": 1.5193749999998545,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatCurrency"],
          "fullName": "Shared Utilities formatCurrency should handle zero",
          "status": "passed",
          "title": "should handle zero",
          "duration": 0.0380829999994603,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatCurrency"],
          "fullName": "Shared Utilities formatCurrency should handle negative numbers",
          "status": "passed",
          "title": "should handle negative numbers",
          "duration": 0.03545800000028976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatNumber"],
          "fullName": "Shared Utilities formatNumber should format a number with commas",
          "status": "passed",
          "title": "should format a number with commas",
          "duration": 0.0315840000002936,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatDate"],
          "fullName": "Shared Utilities formatDate should format a date in short format by default",
          "status": "passed",
          "title": "should format a date in short format by default",
          "duration": 0.09816700000010314,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatDate"],
          "fullName": "Shared Utilities formatDate should format a date in long format",
          "status": "passed",
          "title": "should format a date in long format",
          "duration": 0.07958299999972951,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatDate"],
          "fullName": "Shared Utilities formatDate should format a date to show only time",
          "status": "passed",
          "title": "should format a date to show only time",
          "duration": 0.08208300000023883,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatDate"],
          "fullName": "Shared Utilities formatDate should handle string input",
          "status": "passed",
          "title": "should handle string input",
          "duration": 0.02624999999989086,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatDateTime"],
          "fullName": "Shared Utilities formatDateTime should format a date and time from a Date object",
          "status": "passed",
          "title": "should format a date and time from a Date object",
          "duration": 0.06454200000007404,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatDateTime"],
          "fullName": "Shared Utilities formatDateTime should format a date and time from a string",
          "status": "passed",
          "title": "should format a date and time from a string",
          "duration": 0.05229200000030687,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatPercentage"],
          "fullName": "Shared Utilities formatPercentage should format a number as a percentage with default decimals",
          "status": "passed",
          "title": "should format a number as a percentage with default decimals",
          "duration": 0.04212499999994179,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatPercentage"],
          "fullName": "Shared Utilities formatPercentage should format a number as a percentage with specified decimals",
          "status": "passed",
          "title": "should format a number as a percentage with specified decimals",
          "duration": 0.025167000000692497,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatDuration"],
          "fullName": "Shared Utilities formatDuration should format a number as a duration in hours",
          "status": "passed",
          "title": "should format a number as a duration in hours",
          "duration": 0.02979200000027049,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "formatJapaneseDate"],
          "fullName": "Shared Utilities formatJapaneseDate should format a date in Japanese month/day(weekday) format",
          "status": "passed",
          "title": "should format a date in Japanese month/day(weekday) format",
          "duration": 0.04029200000059063,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Shared Utilities", "generateMockData"],
          "fullName": "Shared Utilities generateMockData should generate an array of mock data",
          "status": "passed",
          "title": "should generate an array of mock data",
          "duration": 0.12274999999954161,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055418,
      "endTime": 1754356055421.1228,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/shared/utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SMS Client", "send"],
          "fullName": "SMS Client send should log the SMS details",
          "status": "passed",
          "title": "should log the SMS details",
          "duration": 0.5688749999999345,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SMS Client", "send"],
          "fullName": "SMS Client send should return success with a unique ID",
          "status": "passed",
          "title": "should return success with a unique ID",
          "duration": 0.23683299999993324,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SMS Client", "send"],
          "fullName": "SMS Client send should generate different IDs for different messages",
          "status": "passed",
          "title": "should generate different IDs for different messages",
          "duration": 0.18079200000011042,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SMS Client", "send"],
          "fullName": "SMS Client send should handle empty message",
          "status": "passed",
          "title": "should handle empty message",
          "duration": 0.17462499999965075,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SMS Client", "send"],
          "fullName": "SMS Client send should handle international phone numbers",
          "status": "passed",
          "title": "should handle international phone numbers",
          "duration": 0.17287500000020373,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SMS Client", "send"],
          "fullName": "SMS Client send should handle long messages",
          "status": "passed",
          "title": "should handle long messages",
          "duration": 0.17370800000026065,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055566,
      "endTime": 1754356055567.2368,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/sms/client.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Storage Index", "getStorageService"],
          "fullName": "Storage Index getStorageService should create a new instance with default config",
          "status": "passed",
          "title": "should create a new instance with default config",
          "duration": 1.6392909999995027,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Storage Index", "getStorageService"],
          "fullName": "Storage Index getStorageService should merge custom config with defaults",
          "status": "passed",
          "title": "should merge custom config with defaults",
          "duration": 0.5270000000000437,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Storage Index", "getStorageService"],
          "fullName": "Storage Index getStorageService should return the same instance on subsequent calls",
          "status": "passed",
          "title": "should return the same instance on subsequent calls",
          "duration": 0.3991669999995793,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Storage Index", "getStorageService"],
          "fullName": "Storage Index getStorageService should allow overriding all config options",
          "status": "passed",
          "title": "should allow overriding all config options",
          "duration": 0.36954100000002654,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Storage Index", "getStorageService"],
          "fullName": "Storage Index getStorageService should handle empty config",
          "status": "passed",
          "title": "should handle empty config",
          "duration": 0.39712500000041473,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055551,
      "endTime": 1754356055554.3972,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/storage/index.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SupabaseStorageService", "constructor"],
          "fullName": "SupabaseStorageService constructor should create instance with valid config and env vars",
          "status": "passed",
          "title": "should create instance with valid config and env vars",
          "duration": 0.42437500000005457,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "constructor"],
          "fullName": "SupabaseStorageService constructor should throw error if SUPABASE_URL is missing",
          "status": "passed",
          "title": "should throw error if SUPABASE_URL is missing",
          "duration": 0.18754200000012133,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "constructor"],
          "fullName": "SupabaseStorageService constructor should throw error if SUPABASE_ANON_KEY is missing",
          "status": "passed",
          "title": "should throw error if SUPABASE_ANON_KEY is missing",
          "duration": 0.16291700000010678,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "upload"],
          "fullName": "SupabaseStorageService upload should upload file successfully",
          "status": "passed",
          "title": "should upload file successfully",
          "duration": 0.8800000000001091,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "upload"],
          "fullName": "SupabaseStorageService upload should throw error if file size exceeds limit",
          "status": "passed",
          "title": "should throw error if file size exceeds limit",
          "duration": 328.74125000000004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "upload"],
          "fullName": "SupabaseStorageService upload should throw error if file type is not allowed",
          "status": "passed",
          "title": "should throw error if file type is not allowed",
          "duration": 0.6393330000000788,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "upload"],
          "fullName": "SupabaseStorageService upload should use custom options when provided",
          "status": "passed",
          "title": "should use custom options when provided",
          "duration": 0.25241600000026665,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "upload"],
          "fullName": "SupabaseStorageService upload should handle upload errors",
          "status": "passed",
          "title": "should handle upload errors",
          "duration": 0.18204200000036508,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "delete"],
          "fullName": "SupabaseStorageService delete should delete file successfully",
          "status": "passed",
          "title": "should delete file successfully",
          "duration": 0.18483299999979863,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "delete"],
          "fullName": "SupabaseStorageService delete should handle delete errors",
          "status": "passed",
          "title": "should handle delete errors",
          "duration": 0.1277500000001055,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "getPublicUrl"],
          "fullName": "SupabaseStorageService getPublicUrl should return public URL",
          "status": "passed",
          "title": "should return public URL",
          "duration": 0.14237499999990177,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "exists"],
          "fullName": "SupabaseStorageService exists should return true if file exists",
          "status": "passed",
          "title": "should return true if file exists",
          "duration": 0.17862500000001091,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "exists"],
          "fullName": "SupabaseStorageService exists should return false if file does not exist",
          "status": "passed",
          "title": "should return false if file does not exist",
          "duration": 0.12504100000023755,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "exists"],
          "fullName": "SupabaseStorageService exists should return false on error",
          "status": "passed",
          "title": "should return false on error",
          "duration": 0.11783400000012989,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SupabaseStorageService", "exists"],
          "fullName": "SupabaseStorageService exists should handle root level files",
          "status": "passed",
          "title": "should handle root level files",
          "duration": 0.14216699999997218,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054000,
      "endTime": 1754356054332.1787,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/storage/supabase-storage.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Customer Login Page"],
          "fullName": "Customer Login Page should render the component without errors",
          "status": "passed",
          "title": "should render the component without errors",
          "duration": 0.054375000000618456,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055872,
      "endTime": 1754356055872.0544,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/[store]/login/page.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Customer MyPage"],
          "fullName": "Customer MyPage should render the component without errors",
          "status": "passed",
          "title": "should render the component without errors",
          "duration": 0.06654100000014296,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer MyPage"],
          "fullName": "Customer MyPage should require authentication",
          "status": "passed",
          "title": "should require authentication",
          "duration": 0.04079100000035396,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055833,
      "endTime": 1754356055833.0667,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/[store]/mypage/page.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Customer Register Page"],
          "fullName": "Customer Register Page should render the component without errors",
          "status": "passed",
          "title": "should render the component without errors",
          "duration": 0.0740829999995185,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055886,
      "endTime": 1754356055886.074,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/[store]/register/page.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Admin Login Page"],
          "fullName": "Admin Login Page should render the component without errors",
          "status": "passed",
          "title": "should render the component without errors",
          "duration": 0.055957999999918684,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055909,
      "endTime": 1754356055909.056,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/admin/login/page.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Cast API endpoints", "GET /api/cast"],
          "fullName": "Cast API endpoints GET /api/cast should return all cast members",
          "status": "passed",
          "title": "should return all cast members",
          "duration": 1.2100829999999405,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast API endpoints", "GET /api/cast"],
          "fullName": "Cast API endpoints GET /api/cast should return a cast member by id",
          "status": "passed",
          "title": "should return a cast member by id",
          "duration": 0.6717920000000959,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast API endpoints", "GET /api/cast"],
          "fullName": "Cast API endpoints GET /api/cast should return 404 when cast member not found",
          "status": "passed",
          "title": "should return 404 when cast member not found",
          "duration": 0.4924590000000535,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast API endpoints", "POST /api/cast"],
          "fullName": "Cast API endpoints POST /api/cast should create a new cast member",
          "status": "passed",
          "title": "should create a new cast member",
          "duration": 1.061333999999988,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast API endpoints", "PUT /api/cast"],
          "fullName": "Cast API endpoints PUT /api/cast should update an existing cast member",
          "status": "passed",
          "title": "should update an existing cast member",
          "duration": 0.7304160000003321,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast API endpoints", "PUT /api/cast"],
          "fullName": "Cast API endpoints PUT /api/cast should return 404 for non-existent cast member",
          "status": "passed",
          "title": "should return 404 for non-existent cast member",
          "duration": 0.44908299999997325,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast API endpoints", "DELETE /api/cast"],
          "fullName": "Cast API endpoints DELETE /api/cast should delete an existing cast member",
          "status": "passed",
          "title": "should delete an existing cast member",
          "duration": 0.4782500000001164,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast API endpoints", "DELETE /api/cast"],
          "fullName": "Cast API endpoints DELETE /api/cast should return 404 for non-existent cast member",
          "status": "passed",
          "title": "should return 404 for non-existent cast member",
          "duration": 0.3997089999998025,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356053978,
      "endTime": 1754356053983.3997,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/cast/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["GET /api/cast-schedule"],
          "fullName": "GET /api/cast-schedule should get schedule by ID",
          "status": "passed",
          "title": "should get schedule by ID",
          "duration": 0.6010420000002341,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/cast-schedule"],
          "fullName": "GET /api/cast-schedule should return 404 for non-existent schedule",
          "status": "passed",
          "title": "should return 404 for non-existent schedule",
          "duration": 0.3367079999998168,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/cast-schedule"],
          "fullName": "GET /api/cast-schedule should filter schedules by castId",
          "status": "passed",
          "title": "should filter schedules by castId",
          "duration": 0.34049999999979264,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/cast-schedule"],
          "fullName": "GET /api/cast-schedule should filter schedules by specific date",
          "status": "passed",
          "title": "should filter schedules by specific date",
          "duration": 0.31237499999997453,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/cast-schedule"],
          "fullName": "GET /api/cast-schedule should filter schedules by date range",
          "status": "passed",
          "title": "should filter schedules by date range",
          "duration": 0.34533399999963876,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/cast-schedule"],
          "fullName": "GET /api/cast-schedule should combine multiple filters",
          "status": "passed",
          "title": "should combine multiple filters",
          "duration": 0.3990840000001299,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/cast-schedule"],
          "fullName": "POST /api/cast-schedule should create a new schedule",
          "status": "passed",
          "title": "should create a new schedule",
          "duration": 0.3683329999998932,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/cast-schedule"],
          "fullName": "POST /api/cast-schedule should default isAvailable to true if not provided",
          "status": "passed",
          "title": "should default isAvailable to true if not provided",
          "duration": 0.4646669999997357,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/cast-schedule"],
          "fullName": "PUT /api/cast-schedule should require ID field",
          "status": "passed",
          "title": "should require ID field",
          "duration": 0.30745900000010806,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/cast-schedule"],
          "fullName": "PUT /api/cast-schedule should update schedule",
          "status": "passed",
          "title": "should update schedule",
          "duration": 0.3139159999996082,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/cast-schedule"],
          "fullName": "PUT /api/cast-schedule should handle non-existent schedule",
          "status": "passed",
          "title": "should handle non-existent schedule",
          "duration": 0.32329200000003766,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/cast-schedule"],
          "fullName": "DELETE /api/cast-schedule should require ID parameter",
          "status": "passed",
          "title": "should require ID parameter",
          "duration": 0.2674170000000231,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/cast-schedule"],
          "fullName": "DELETE /api/cast-schedule should delete schedule",
          "status": "passed",
          "title": "should delete schedule",
          "duration": 0.26575000000002547,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/cast-schedule"],
          "fullName": "DELETE /api/cast-schedule should handle non-existent schedule",
          "status": "passed",
          "title": "should handle non-existent schedule",
          "duration": 0.28079200000001947,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Cast Schedule API - Conflict Detection"],
          "fullName": "Cast Schedule API - Conflict Detection should detect schedule conflicts when creating overlapping schedules",
          "status": "passed",
          "title": "should detect schedule conflicts when creating overlapping schedules",
          "duration": 0.24337500000001455,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052530,
      "endTime": 1754356052535.2808,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/cast-schedule/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Chat Message Persistence"],
          "fullName": "Chat Message Persistence should persist messages and retrieve them on subsequent requests",
          "status": "passed",
          "title": "should persist messages and retrieve them on subsequent requests",
          "duration": 0.8719999999993888,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat Message Persistence"],
          "fullName": "Chat Message Persistence should handle multiple messages from different senders persistently",
          "status": "passed",
          "title": "should handle multiple messages from different senders persistently",
          "duration": 0.3369170000005397,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054967,
      "endTime": 1754356054968.337,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/chat/persistence.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Chat API", "GET /api/chat"],
          "fullName": "Chat API GET /api/chat should fetch messages for a specific customer from database",
          "status": "passed",
          "title": "should fetch messages for a specific customer from database",
          "duration": 0.839708999999857,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat API", "GET /api/chat"],
          "fullName": "Chat API GET /api/chat should fetch all messages grouped by customer when no customerId provided",
          "status": "passed",
          "title": "should fetch all messages grouped by customer when no customerId provided",
          "duration": 0.36799999999993815,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat API", "GET /api/chat"],
          "fullName": "Chat API GET /api/chat should return 401 if not authenticated as admin",
          "status": "passed",
          "title": "should return 401 if not authenticated as admin",
          "duration": 0.24625000000014552,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat API", "POST /api/chat"],
          "fullName": "Chat API POST /api/chat should create a new message in database",
          "status": "passed",
          "title": "should create a new message in database",
          "duration": 1.0749580000001515,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat API", "POST /api/chat"],
          "fullName": "Chat API POST /api/chat should create message with reservation info when provided",
          "status": "passed",
          "title": "should create message with reservation info when provided",
          "duration": 0.5321249999997235,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat API", "POST /api/chat"],
          "fullName": "Chat API POST /api/chat should return 400 for invalid request body",
          "status": "passed",
          "title": "should return 400 for invalid request body",
          "duration": 0.538792000000285,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat API", "PUT /api/chat"],
          "fullName": "Chat API PUT /api/chat should update message read status in database",
          "status": "passed",
          "title": "should update message read status in database",
          "duration": 0.33550000000013824,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat API", "PUT /api/chat"],
          "fullName": "Chat API PUT /api/chat should return 404 if message not found",
          "status": "passed",
          "title": "should return 404 if message not found",
          "duration": 0.32587499999999636,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356053151,
      "endTime": 1754356053155.3354,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/chat/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["GET /api/course"],
          "fullName": "GET /api/course should get course by ID",
          "status": "passed",
          "title": "should get course by ID",
          "duration": 0.6606249999999818,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/course"],
          "fullName": "GET /api/course should return 404 for non-existent course",
          "status": "passed",
          "title": "should return 404 for non-existent course",
          "duration": 0.3350420000001577,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/course"],
          "fullName": "GET /api/course should get all courses sorted by price",
          "status": "passed",
          "title": "should get all courses sorted by price",
          "duration": 0.37254200000006676,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/course"],
          "fullName": "POST /api/course should create a new course",
          "status": "passed",
          "title": "should create a new course",
          "duration": 0.3967499999998836,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/course"],
          "fullName": "POST /api/course should default description to empty string if not provided",
          "status": "passed",
          "title": "should default description to empty string if not provided",
          "duration": 0.3127499999995962,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/course"],
          "fullName": "POST /api/course should handle database creation errors",
          "status": "passed",
          "title": "should handle database creation errors",
          "duration": 0.26024999999981446,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/course"],
          "fullName": "PUT /api/course should require ID field",
          "status": "passed",
          "title": "should require ID field",
          "duration": 0.27654100000017934,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/course"],
          "fullName": "PUT /api/course should update course data",
          "status": "passed",
          "title": "should update course data",
          "duration": 0.3310830000000351,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/course"],
          "fullName": "PUT /api/course should handle non-existent course",
          "status": "passed",
          "title": "should handle non-existent course",
          "duration": 0.26633300000003146,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/course"],
          "fullName": "DELETE /api/course should require ID parameter",
          "status": "passed",
          "title": "should require ID parameter",
          "duration": 0.25370799999973315,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/course"],
          "fullName": "DELETE /api/course should delete course",
          "status": "passed",
          "title": "should delete course",
          "duration": 0.24324999999998909,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/course"],
          "fullName": "DELETE /api/course should handle non-existent course",
          "status": "passed",
          "title": "should handle non-existent course",
          "duration": 0.30304100000012113,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course API - Validation and Edge Cases"],
          "fullName": "Course API - Validation and Edge Cases should handle invalid JSON in POST request",
          "status": "passed",
          "title": "should handle invalid JSON in POST request",
          "duration": 0.29037500000004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course API - Validation and Edge Cases"],
          "fullName": "Course API - Validation and Edge Cases should handle course price calculations correctly",
          "status": "passed",
          "title": "should handle course price calculations correctly",
          "duration": 0.28966700000000856,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Course API - Validation and Edge Cases"],
          "fullName": "Course API - Validation and Edge Cases should maintain referential integrity with reservations",
          "status": "passed",
          "title": "should maintain referential integrity with reservations",
          "duration": 0.32425000000012005,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052568,
      "endTime": 1754356052572.3242,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/course/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["GET /api/customer"],
          "fullName": "GET /api/customer should require authentication to get customer by ID",
          "status": "passed",
          "title": "should require authentication to get customer by ID",
          "duration": 0.4128330000000915,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/customer"],
          "fullName": "GET /api/customer should prevent access to other customer data",
          "status": "passed",
          "title": "should prevent access to other customer data",
          "duration": 0.27158399999984795,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/customer"],
          "fullName": "GET /api/customer should return customer data for authenticated customer",
          "status": "passed",
          "title": "should return customer data for authenticated customer",
          "duration": 0.29045799999994415,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/customer"],
          "fullName": "GET /api/customer should return 404 for non-existent customer",
          "status": "passed",
          "title": "should return 404 for non-existent customer",
          "duration": 0.23220800000012787,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/customer"],
          "fullName": "GET /api/customer should return 403 when no id parameter provided",
          "status": "passed",
          "title": "should return 403 when no id parameter provided",
          "duration": 0.19420799999988958,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/customer"],
          "fullName": "POST /api/customer should create a new customer",
          "status": "passed",
          "title": "should create a new customer",
          "duration": 0.3258339999999862,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/customer"],
          "fullName": "POST /api/customer should require password field",
          "status": "passed",
          "title": "should require password field",
          "duration": 0.23529099999996106,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/customer"],
          "fullName": "POST /api/customer should handle duplicate email or phone",
          "status": "passed",
          "title": "should handle duplicate email or phone",
          "duration": 0.22491699999977754,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/customer"],
          "fullName": "PUT /api/customer should require authentication",
          "status": "passed",
          "title": "should require authentication",
          "duration": 0.2515410000000884,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/customer"],
          "fullName": "PUT /api/customer should prevent updating other customer data",
          "status": "passed",
          "title": "should prevent updating other customer data",
          "duration": 0.22208299999988412,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/customer"],
          "fullName": "PUT /api/customer should update customer data",
          "status": "passed",
          "title": "should update customer data",
          "duration": 0.2620830000000751,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/customer"],
          "fullName": "PUT /api/customer should update password with hashing",
          "status": "passed",
          "title": "should update password with hashing",
          "duration": 0.27224999999998545,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/customer"],
          "fullName": "PUT /api/customer should handle non-existent customer",
          "status": "passed",
          "title": "should handle non-existent customer",
          "duration": 0.22262499999987995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/customer"],
          "fullName": "DELETE /api/customer should always return forbidden",
          "status": "passed",
          "title": "should always return forbidden",
          "duration": 0.20058399999993526,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer API - Validation Tests"],
          "fullName": "Customer API - Validation Tests should validate email format in POST",
          "status": "passed",
          "title": "should validate email format in POST",
          "duration": 0.2289579999999205,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer API - Validation Tests"],
          "fullName": "Customer API - Validation Tests should validate phone format in POST",
          "status": "passed",
          "title": "should validate phone format in POST",
          "duration": 0.21383399999990615,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Customer API - Validation Tests"],
          "fullName": "Customer API - Validation Tests should validate birthDate format",
          "status": "passed",
          "title": "should validate birthDate format",
          "duration": 0.22108300000013514,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052492,
      "endTime": 1754356052496.229,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/customer/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["GET /api/option"],
          "fullName": "GET /api/option should get option by ID",
          "status": "passed",
          "title": "should get option by ID",
          "duration": 0.5255839999999807,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/option"],
          "fullName": "GET /api/option should return 404 for non-existent option",
          "status": "passed",
          "title": "should return 404 for non-existent option",
          "duration": 0.3103329999999005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/option"],
          "fullName": "GET /api/option should get all options sorted by price",
          "status": "passed",
          "title": "should get all options sorted by price",
          "duration": 0.38133300000004056,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/option"],
          "fullName": "GET /api/option should include reservation data when available",
          "status": "passed",
          "title": "should include reservation data when available",
          "duration": 0.3246249999999691,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/option"],
          "fullName": "POST /api/option should create a new option",
          "status": "passed",
          "title": "should create a new option",
          "duration": 0.3869579999998223,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/option"],
          "fullName": "POST /api/option should handle database creation errors",
          "status": "passed",
          "title": "should handle database creation errors",
          "duration": 0.2849590000000717,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/option"],
          "fullName": "POST /api/option should handle missing required fields",
          "status": "passed",
          "title": "should handle missing required fields",
          "duration": 0.2382910000001175,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/option"],
          "fullName": "PUT /api/option should require ID field",
          "status": "passed",
          "title": "should require ID field",
          "duration": 0.2500839999997879,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/option"],
          "fullName": "PUT /api/option should update option data",
          "status": "passed",
          "title": "should update option data",
          "duration": 0.28379199999994853,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/option"],
          "fullName": "PUT /api/option should handle non-existent option",
          "status": "passed",
          "title": "should handle non-existent option",
          "duration": 0.233791999999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/option"],
          "fullName": "PUT /api/option should allow partial updates",
          "status": "passed",
          "title": "should allow partial updates",
          "duration": 0.27108399999997346,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/option"],
          "fullName": "DELETE /api/option should require ID parameter",
          "status": "passed",
          "title": "should require ID parameter",
          "duration": 0.22174999999992906,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/option"],
          "fullName": "DELETE /api/option should delete option",
          "status": "passed",
          "title": "should delete option",
          "duration": 0.20924999999988358,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/option"],
          "fullName": "DELETE /api/option should handle non-existent option",
          "status": "passed",
          "title": "should handle non-existent option",
          "duration": 0.2393339999998716,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Option API - Business Logic and Validation"],
          "fullName": "Option API - Business Logic and Validation should handle option combination restrictions",
          "status": "passed",
          "title": "should handle option combination restrictions",
          "duration": 0.21729200000004312,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Option API - Business Logic and Validation"],
          "fullName": "Option API - Business Logic and Validation should calculate total price correctly for multiple options",
          "status": "passed",
          "title": "should calculate total price correctly for multiple options",
          "duration": 0.23324999999999818,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Option API - Business Logic and Validation"],
          "fullName": "Option API - Business Logic and Validation should maintain referential integrity with reservations",
          "status": "passed",
          "title": "should maintain referential integrity with reservations",
          "duration": 0.24891600000000835,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052475,
      "endTime": 1754356052480.249,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/option/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Reservation API - Notification Integration"],
          "fullName": "Reservation API - Notification Integration should send notification when reservation is created successfully",
          "status": "passed",
          "title": "should send notification when reservation is created successfully",
          "duration": 1.3121250000003783,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Reservation API - Notification Integration"],
          "fullName": "Reservation API - Notification Integration should not fail reservation creation if notification fails",
          "status": "passed",
          "title": "should not fail reservation creation if notification fails",
          "duration": 0.4926660000000993,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054628,
      "endTime": 1754356054629.4927,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/reservation/integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Reservation API - Modifiable Status", "GET endpoint"],
          "fullName": "Reservation API - Modifiable Status GET endpoint should return reservation with modifiableUntil field",
          "status": "passed",
          "title": "should return reservation with modifiableUntil field",
          "duration": 0.7718330000002425,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Reservation API - Modifiable Status",
            "PUT endpoint - Modifiable Status Support"
          ],
          "fullName": "Reservation API - Modifiable Status PUT endpoint - Modifiable Status Support should allow changing status to modifiable with modifiableUntil",
          "status": "passed",
          "title": "should allow changing status to modifiable with modifiableUntil",
          "duration": 0.709041999999954,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Reservation API - Modifiable Status",
            "PUT endpoint - Modifiable Status Support"
          ],
          "fullName": "Reservation API - Modifiable Status PUT endpoint - Modifiable Status Support should reject modification of modifiable reservation by non-admin users",
          "status": "passed",
          "title": "should reject modification of modifiable reservation by non-admin users",
          "duration": 0.5044170000001031,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Reservation API - Modifiable Status",
            "PUT endpoint - Modifiable Status Support"
          ],
          "fullName": "Reservation API - Modifiable Status PUT endpoint - Modifiable Status Support should allow admin to modify reservations with modifiable status",
          "status": "passed",
          "title": "should allow admin to modify reservations with modifiable status",
          "duration": 0.51949999999988,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Reservation API - Modifiable Status",
            "PUT endpoint - Modifiable Status Support"
          ],
          "fullName": "Reservation API - Modifiable Status PUT endpoint - Modifiable Status Support should automatically revert to confirmed when updating expired modifiable reservation",
          "status": "passed",
          "title": "should automatically revert to confirmed when updating expired modifiable reservation",
          "duration": 0.5066670000001068,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054483,
      "endTime": 1754356054486.5066,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/reservation/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["GET /api/review"],
          "fullName": "GET /api/review should get review by ID",
          "status": "passed",
          "title": "should get review by ID",
          "duration": 0.749416999999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/review"],
          "fullName": "GET /api/review should return 404 for non-existent review",
          "status": "passed",
          "title": "should return 404 for non-existent review",
          "duration": 0.37341700000001765,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/review"],
          "fullName": "GET /api/review should filter reviews by castId",
          "status": "passed",
          "title": "should filter reviews by castId",
          "duration": 0.378624999999829,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/review"],
          "fullName": "GET /api/review should filter reviews by customerId",
          "status": "passed",
          "title": "should filter reviews by customerId",
          "duration": 0.3787499999998545,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/review"],
          "fullName": "GET /api/review should get all reviews sorted by creation date descending",
          "status": "passed",
          "title": "should get all reviews sorted by creation date descending",
          "duration": 0.2705839999998716,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/review"],
          "fullName": "POST /api/review should create a new review",
          "status": "passed",
          "title": "should create a new review",
          "duration": 0.422458000000006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/review"],
          "fullName": "POST /api/review should default comment to empty string if not provided",
          "status": "passed",
          "title": "should default comment to empty string if not provided",
          "duration": 0.33024999999997817,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/review"],
          "fullName": "POST /api/review should handle database creation errors",
          "status": "passed",
          "title": "should handle database creation errors",
          "duration": 0.33170800000016243,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/review"],
          "fullName": "PUT /api/review should require ID field",
          "status": "passed",
          "title": "should require ID field",
          "duration": 0.3125,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/review"],
          "fullName": "PUT /api/review should update review data",
          "status": "passed",
          "title": "should update review data",
          "duration": 0.3652089999998225,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/review"],
          "fullName": "PUT /api/review should handle non-existent review",
          "status": "passed",
          "title": "should handle non-existent review",
          "duration": 0.24308399999995345,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PUT /api/review"],
          "fullName": "PUT /api/review should allow partial updates",
          "status": "passed",
          "title": "should allow partial updates",
          "duration": 0.32320900000013353,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/review"],
          "fullName": "DELETE /api/review should require ID parameter",
          "status": "passed",
          "title": "should require ID parameter",
          "duration": 0.26004199999988487,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/review"],
          "fullName": "DELETE /api/review should delete review",
          "status": "passed",
          "title": "should delete review",
          "duration": 0.2913330000001224,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["DELETE /api/review"],
          "fullName": "DELETE /api/review should handle non-existent review",
          "status": "passed",
          "title": "should handle non-existent review",
          "duration": 0.2750829999999951,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Review API - Business Logic and Validation"],
          "fullName": "Review API - Business Logic and Validation should validate rating range (1-5)",
          "status": "passed",
          "title": "should validate rating range (1-5)",
          "duration": 0.31199999999989814,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Review API - Business Logic and Validation"],
          "fullName": "Review API - Business Logic and Validation should prevent duplicate reviews from same customer for same cast",
          "status": "passed",
          "title": "should prevent duplicate reviews from same customer for same cast",
          "duration": 0.23833400000012261,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Review API - Business Logic and Validation"],
          "fullName": "Review API - Business Logic and Validation should calculate average rating for cast correctly",
          "status": "passed",
          "title": "should calculate average rating for cast correctly",
          "duration": 0.2918329999999969,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Review API - Business Logic and Validation"],
          "fullName": "Review API - Business Logic and Validation should maintain referential integrity with customer and cast",
          "status": "passed",
          "title": "should maintain referential integrity with customer and cast",
          "duration": 0.257082999999966,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356052441,
      "endTime": 1754356052448.257,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/review/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["POST /api/upload"],
          "fullName": "POST /api/upload ファイルが選択されていない場合はエラーを返す",
          "status": "passed",
          "title": "ファイルが選択されていない場合はエラーを返す",
          "duration": 0.3513329999996131,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/upload"],
          "fullName": "POST /api/upload ファイルサイズが5MBを超える場合はエラーを返す",
          "status": "passed",
          "title": "ファイルサイズが5MBを超える場合はエラーを返す",
          "duration": 304.091042,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/upload"],
          "fullName": "POST /api/upload 対応していないファイル形式の場合はエラーを返す",
          "status": "passed",
          "title": "対応していないファイル形式の場合はエラーを返す",
          "duration": 0.7712499999997817,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/upload"],
          "fullName": "POST /api/upload 正常にファイルをアップロードできる",
          "status": "passed",
          "title": "正常にファイルをアップロードできる",
          "duration": 0.36266599999999016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/upload"],
          "fullName": "POST /api/upload アップロードエラーの場合は500エラーを返す",
          "status": "passed",
          "title": "アップロードエラーの場合は500エラーを返す",
          "duration": 0.22845800000050076,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055063,
      "endTime": 1754356055369.2285,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/upload/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PaymentProvider", "abstract methods"],
          "fullName": "PaymentProvider abstract methods should have required properties",
          "status": "passed",
          "title": "should have required properties",
          "duration": 0.09883300000001327,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentProvider", "abstract methods"],
          "fullName": "PaymentProvider abstract methods should throw error for processPayment when not implemented",
          "status": "passed",
          "title": "should throw error for processPayment when not implemented",
          "duration": 0.10945899999933317,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentProvider", "abstract methods"],
          "fullName": "PaymentProvider abstract methods should throw error for createPaymentIntent when not implemented",
          "status": "passed",
          "title": "should throw error for createPaymentIntent when not implemented",
          "duration": 0.07183299999996962,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentProvider", "abstract methods"],
          "fullName": "PaymentProvider abstract methods should throw error for confirmPaymentIntent when not implemented",
          "status": "passed",
          "title": "should throw error for confirmPaymentIntent when not implemented",
          "duration": 0.0625,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentProvider", "abstract methods"],
          "fullName": "PaymentProvider abstract methods should throw error for refundPayment when not implemented",
          "status": "passed",
          "title": "should throw error for refundPayment when not implemented",
          "duration": 0.058082999999896856,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentProvider", "abstract methods"],
          "fullName": "PaymentProvider abstract methods should throw error for getPaymentStatus when not implemented",
          "status": "passed",
          "title": "should throw error for getPaymentStatus when not implemented",
          "duration": 0.052417000000787084,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentProvider", "abstract methods"],
          "fullName": "PaymentProvider abstract methods should throw error for validateConfig when not implemented",
          "status": "passed",
          "title": "should throw error for validateConfig when not implemented",
          "duration": 0.052625000000261934,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055478,
      "endTime": 1754356055479.0718,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/payment/__tests__/payment-provider.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PaymentService", "processPayment"],
          "fullName": "PaymentService processPayment should process payment successfully",
          "status": "passed",
          "title": "should process payment successfully",
          "duration": 0.63412500000004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentService", "processPayment"],
          "fullName": "PaymentService processPayment should throw error for unsupported provider",
          "status": "passed",
          "title": "should throw error for unsupported provider",
          "duration": 0.17233299999998053,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentService", "createPaymentIntent"],
          "fullName": "PaymentService createPaymentIntent should create payment intent successfully",
          "status": "passed",
          "title": "should create payment intent successfully",
          "duration": 0.1643330000001697,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentService", "getPaymentHistory"],
          "fullName": "PaymentService getPaymentHistory should retrieve payment history for customer",
          "status": "passed",
          "title": "should retrieve payment history for customer",
          "duration": 0.10554200000024139,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentService", "getPaymentHistory"],
          "fullName": "PaymentService getPaymentHistory should retrieve payment history for reservation",
          "status": "passed",
          "title": "should retrieve payment history for reservation",
          "duration": 0.1331249999998363,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentService", "refundPayment"],
          "fullName": "PaymentService refundPayment should process refund successfully",
          "status": "passed",
          "title": "should process refund successfully",
          "duration": 0.2452499999999418,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PaymentService", "getPaymentStatus"],
          "fullName": "PaymentService getPaymentStatus should get payment status successfully",
          "status": "passed",
          "title": "should get payment status successfully",
          "duration": 0.13741700000036872,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054417,
      "endTime": 1754356054418.2454,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/payment/__tests__/payment-service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["StripeProvider", "provider properties"],
          "fullName": "StripeProvider provider properties should have correct name and supported methods",
          "status": "passed",
          "title": "should have correct name and supported methods",
          "duration": 0.12120899999990797,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["StripeProvider", "processPayment"],
          "fullName": "StripeProvider processPayment should process card payment successfully",
          "status": "passed",
          "title": "should process card payment successfully",
          "duration": 0.1422920000004524,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["StripeProvider", "createPaymentIntent"],
          "fullName": "StripeProvider createPaymentIntent should create payment intent successfully",
          "status": "passed",
          "title": "should create payment intent successfully",
          "duration": 0.08224999999947613,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["StripeProvider", "confirmPaymentIntent"],
          "fullName": "StripeProvider confirmPaymentIntent should confirm payment intent successfully",
          "status": "passed",
          "title": "should confirm payment intent successfully",
          "duration": 0.07420799999999872,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["StripeProvider", "refundPayment"],
          "fullName": "StripeProvider refundPayment should process refund successfully",
          "status": "passed",
          "title": "should process refund successfully",
          "duration": 0.0672919999997248,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["StripeProvider", "getPaymentStatus"],
          "fullName": "StripeProvider getPaymentStatus should get payment status successfully",
          "status": "passed",
          "title": "should get payment status successfully",
          "duration": 0.06079200000021956,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["StripeProvider", "validateConfig"],
          "fullName": "StripeProvider validateConfig should validate configuration successfully",
          "status": "passed",
          "title": "should validate configuration successfully",
          "duration": 0.03308400000059919,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["StripeProvider", "validateConfig"],
          "fullName": "StripeProvider validateConfig should throw error with invalid config",
          "status": "passed",
          "title": "should throw error with invalid config",
          "duration": 0.07066699999995762,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055000,
      "endTime": 1754356055000.1423,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/payment/__tests__/stripe-provider.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Reservation-Payment Integration", "createReservationWithPayment"],
          "fullName": "Reservation-Payment Integration createReservationWithPayment should create reservation and process payment successfully",
          "status": "passed",
          "title": "should create reservation and process payment successfully",
          "duration": 0.3528329999999187,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Reservation-Payment Integration", "createReservationWithPayment"],
          "fullName": "Reservation-Payment Integration createReservationWithPayment should handle payment failure and cancel reservation",
          "status": "passed",
          "title": "should handle payment failure and cancel reservation",
          "duration": 0.08687499999996362,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Reservation-Payment Integration",
            "createReservationWithPaymentIntent"
          ],
          "fullName": "Reservation-Payment Integration createReservationWithPaymentIntent should create reservation and payment intent for client-side processing",
          "status": "passed",
          "title": "should create reservation and payment intent for client-side processing",
          "duration": 0.1352919999999358,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Reservation-Payment Integration", "getReservationWithPayments"],
          "fullName": "Reservation-Payment Integration getReservationWithPayments should get reservation with payment history",
          "status": "passed",
          "title": "should get reservation with payment history",
          "duration": 0.09341700000004494,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Reservation-Payment Integration", "cancelReservationWithRefund"],
          "fullName": "Reservation-Payment Integration cancelReservationWithRefund should cancel reservation and process refund",
          "status": "passed",
          "title": "should cancel reservation and process refund",
          "duration": 0.12658300000020972,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054453,
      "endTime": 1754356054454.1353,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/lib/reservation/__tests__/reservation-payment-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["POST /api/auth/forgot-password"],
          "fullName": "POST /api/auth/forgot-password should send password reset email for valid customer",
          "status": "passed",
          "title": "should send password reset email for valid customer",
          "duration": 0.7242080000000897,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/forgot-password"],
          "fullName": "POST /api/auth/forgot-password should return success even for non-existent email (security)",
          "status": "passed",
          "title": "should return success even for non-existent email (security)",
          "duration": 0.35529200000019046,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/forgot-password"],
          "fullName": "POST /api/auth/forgot-password should return error for missing email",
          "status": "passed",
          "title": "should return error for missing email",
          "duration": 0.3279160000001866,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/forgot-password"],
          "fullName": "POST /api/auth/forgot-password should return error for invalid email format",
          "status": "passed",
          "title": "should return error for invalid email format",
          "duration": 0.31295799999998053,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/forgot-password"],
          "fullName": "POST /api/auth/forgot-password should handle email sending failure",
          "status": "passed",
          "title": "should handle email sending failure",
          "duration": 0.3332909999999174,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/forgot-password"],
          "fullName": "POST /api/auth/forgot-password should handle database update failure",
          "status": "passed",
          "title": "should handle database update failure",
          "duration": 0.31599999999980355,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054557,
      "endTime": 1754356054559.3333,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/auth/forgot-password/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["POST /api/auth/reset-password"],
          "fullName": "POST /api/auth/reset-password should reset password with valid token",
          "status": "passed",
          "title": "should reset password with valid token",
          "duration": 0.8419999999996435,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/reset-password"],
          "fullName": "POST /api/auth/reset-password should return error for invalid token",
          "status": "passed",
          "title": "should return error for invalid token",
          "duration": 0.3949579999998605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/reset-password"],
          "fullName": "POST /api/auth/reset-password should return error for expired token",
          "status": "passed",
          "title": "should return error for expired token",
          "duration": 0.32862500000010186,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/reset-password"],
          "fullName": "POST /api/auth/reset-password should return error for missing token",
          "status": "passed",
          "title": "should return error for missing token",
          "duration": 0.34745799999973315,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/reset-password"],
          "fullName": "POST /api/auth/reset-password should return error for missing password",
          "status": "passed",
          "title": "should return error for missing password",
          "duration": 0.3184999999998581,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/reset-password"],
          "fullName": "POST /api/auth/reset-password should return error for short password",
          "status": "passed",
          "title": "should return error for short password",
          "duration": 0.34979100000009566,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/reset-password"],
          "fullName": "POST /api/auth/reset-password should handle database update failure",
          "status": "passed",
          "title": "should handle database update failure",
          "duration": 0.33829100000002654,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/reset-password"],
          "fullName": "POST /api/auth/reset-password should handle invalid JSON body",
          "status": "passed",
          "title": "should handle invalid JSON body",
          "duration": 0.28487500000028376,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054468,
      "endTime": 1754356054471.285,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/auth/reset-password/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["POST /api/cast-schedule/batch"],
          "fullName": "POST /api/cast-schedule/batch should create and update schedules in batch",
          "status": "passed",
          "title": "should create and update schedules in batch",
          "duration": 0.9738750000005894,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/cast-schedule/batch"],
          "fullName": "POST /api/cast-schedule/batch should require admin authentication",
          "status": "passed",
          "title": "should require admin authentication",
          "duration": 0.38233299999956216,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/cast-schedule/batch"],
          "fullName": "POST /api/cast-schedule/batch should validate request body",
          "status": "passed",
          "title": "should validate request body",
          "duration": 0.37862500000028376,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/cast-schedule/batch"],
          "fullName": "POST /api/cast-schedule/batch should handle transaction errors",
          "status": "passed",
          "title": "should handle transaction errors",
          "duration": 0.6567500000001019,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356055025,
      "endTime": 1754356055027.6567,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/cast-schedule/batch/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Chat Customers API", "GET /api/chat/customers"],
          "fullName": "Chat Customers API GET /api/chat/customers should fetch all customers with last message info from database",
          "status": "passed",
          "title": "should fetch all customers with last message info from database",
          "duration": 0.9492920000002414,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat Customers API", "GET /api/chat/customers"],
          "fullName": "Chat Customers API GET /api/chat/customers should fetch specific customer by id",
          "status": "passed",
          "title": "should fetch specific customer by id",
          "duration": 0.4862079999998059,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat Customers API", "GET /api/chat/customers"],
          "fullName": "Chat Customers API GET /api/chat/customers should return 404 if customer not found",
          "status": "passed",
          "title": "should return 404 if customer not found",
          "duration": 0.33754199999975754,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Chat Customers API", "GET /api/chat/customers"],
          "fullName": "Chat Customers API GET /api/chat/customers should return 401 if not authenticated as admin",
          "status": "passed",
          "title": "should return 401 if not authenticated as admin",
          "duration": 0.25241600000026665,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054374,
      "endTime": 1754356054376.3376,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/chat/customers/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["/api/payments", "POST /api/payments"],
          "fullName": "/api/payments POST /api/payments should process payment successfully",
          "status": "passed",
          "title": "should process payment successfully",
          "duration": 0.7417919999998048,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments", "POST /api/payments"],
          "fullName": "/api/payments POST /api/payments should return 400 for invalid payment data",
          "status": "passed",
          "title": "should return 400 for invalid payment data",
          "duration": 0.379917000000205,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments", "POST /api/payments"],
          "fullName": "/api/payments POST /api/payments should handle payment processing failure",
          "status": "passed",
          "title": "should handle payment processing failure",
          "duration": 0.35770899999988615,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments", "GET /api/payments"],
          "fullName": "/api/payments GET /api/payments should get payment history by customerId",
          "status": "passed",
          "title": "should get payment history by customerId",
          "duration": 0.45024999999986903,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments", "GET /api/payments"],
          "fullName": "/api/payments GET /api/payments should get payment history by reservationId",
          "status": "passed",
          "title": "should get payment history by reservationId",
          "duration": 0.395542000000205,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments", "GET /api/payments"],
          "fullName": "/api/payments GET /api/payments should return 400 when no query parameters provided",
          "status": "passed",
          "title": "should return 400 when no query parameters provided",
          "duration": 0.2907500000001164,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054939,
      "endTime": 1754356054942.2908,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/payments/__tests__/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["GET /api/reservation/availability"],
          "fullName": "GET /api/reservation/availability should return available time slots for a specific cast and date",
          "status": "passed",
          "title": "should return available time slots for a specific cast and date",
          "duration": 1.7849169999999503,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/reservation/availability"],
          "fullName": "GET /api/reservation/availability should check for conflicts when a specific time range is provided",
          "status": "passed",
          "title": "should check for conflicts when a specific time range is provided",
          "duration": 0.587500000000091,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/reservation/availability"],
          "fullName": "GET /api/reservation/availability should return true when no conflicts exist",
          "status": "passed",
          "title": "should return true when no conflicts exist",
          "duration": 0.47841699999980847,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/reservation/availability"],
          "fullName": "GET /api/reservation/availability should handle multiple cast availability check",
          "status": "passed",
          "title": "should handle multiple cast availability check",
          "duration": 0.5023750000000291,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/reservation/availability"],
          "fullName": "GET /api/reservation/availability should exclude cancelled reservations from conflict check",
          "status": "passed",
          "title": "should exclude cancelled reservations from conflict check",
          "duration": 0.4942909999999756,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/reservation/availability"],
          "fullName": "GET /api/reservation/availability should validate required parameters",
          "status": "passed",
          "title": "should validate required parameters",
          "duration": 0.3510830000000169,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/reservation/availability"],
          "fullName": "GET /api/reservation/availability should handle invalid date formats",
          "status": "passed",
          "title": "should handle invalid date formats",
          "duration": 0.41204100000004473,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GET /api/reservation/availability"],
          "fullName": "GET /api/reservation/availability should handle database errors gracefully",
          "status": "passed",
          "title": "should handle database errors gracefully",
          "duration": 0.49633300000004965,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054354,
      "endTime": 1754356054359.4963,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/reservation/availability/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["POST /api/auth/verify-email/confirm"],
          "fullName": "POST /api/auth/verify-email/confirm should verify email with valid token",
          "status": "passed",
          "title": "should verify email with valid token",
          "duration": 0.8122079999998277,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/confirm"],
          "fullName": "POST /api/auth/verify-email/confirm should return success for already verified email",
          "status": "passed",
          "title": "should return success for already verified email",
          "duration": 0.37112500000012005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/confirm"],
          "fullName": "POST /api/auth/verify-email/confirm should return error for invalid token",
          "status": "passed",
          "title": "should return error for invalid token",
          "duration": 0.33341699999982666,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/confirm"],
          "fullName": "POST /api/auth/verify-email/confirm should return error for expired token",
          "status": "passed",
          "title": "should return error for expired token",
          "duration": 0.2870419999999285,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/confirm"],
          "fullName": "POST /api/auth/verify-email/confirm should return error for missing token",
          "status": "passed",
          "title": "should return error for missing token",
          "duration": 0.31170799999972587,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/confirm"],
          "fullName": "POST /api/auth/verify-email/confirm should return error for empty token",
          "status": "passed",
          "title": "should return error for empty token",
          "duration": 0.3043750000001637,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/confirm"],
          "fullName": "POST /api/auth/verify-email/confirm should handle database update failure",
          "status": "passed",
          "title": "should handle database update failure",
          "duration": 0.30712499999981446,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/confirm"],
          "fullName": "POST /api/auth/verify-email/confirm should handle database find failure",
          "status": "passed",
          "title": "should handle database find failure",
          "duration": 0.28595899999982066,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/confirm"],
          "fullName": "POST /api/auth/verify-email/confirm should handle invalid JSON body",
          "status": "passed",
          "title": "should handle invalid JSON body",
          "duration": 0.3040419999997539,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054540,
      "endTime": 1754356054543.304,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/auth/verify-email/confirm/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["POST /api/auth/verify-email/send"],
          "fullName": "POST /api/auth/verify-email/send should send verification email for unverified customer",
          "status": "passed",
          "title": "should send verification email for unverified customer",
          "duration": 0.9608749999997599,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/send"],
          "fullName": "POST /api/auth/verify-email/send should return success message for already verified email",
          "status": "passed",
          "title": "should return success message for already verified email",
          "duration": 0.40970800000013696,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/send"],
          "fullName": "POST /api/auth/verify-email/send should return error for non-existent email",
          "status": "passed",
          "title": "should return error for non-existent email",
          "duration": 0.3369999999999891,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/send"],
          "fullName": "POST /api/auth/verify-email/send should return error for missing email",
          "status": "passed",
          "title": "should return error for missing email",
          "duration": 0.312083000000257,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/send"],
          "fullName": "POST /api/auth/verify-email/send should return error for invalid email format",
          "status": "passed",
          "title": "should return error for invalid email format",
          "duration": 0.3217920000001868,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/send"],
          "fullName": "POST /api/auth/verify-email/send should handle email sending failure",
          "status": "passed",
          "title": "should handle email sending failure",
          "duration": 0.3486249999996289,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/send"],
          "fullName": "POST /api/auth/verify-email/send should handle database update failure",
          "status": "passed",
          "title": "should handle database update failure",
          "duration": 0.33216600000014296,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["POST /api/auth/verify-email/send"],
          "fullName": "POST /api/auth/verify-email/send should handle invalid JSON body",
          "status": "passed",
          "title": "should handle invalid JSON body",
          "duration": 0.2781249999998181,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054518,
      "endTime": 1754356054521.3486,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/auth/verify-email/send/route.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["/api/payments/intents", "POST /api/payments/intents"],
          "fullName": "/api/payments/intents POST /api/payments/intents should create payment intent successfully",
          "status": "passed",
          "title": "should create payment intent successfully",
          "duration": 0.8400000000001455,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments/intents", "POST /api/payments/intents"],
          "fullName": "/api/payments/intents POST /api/payments/intents should return 400 for invalid intent data",
          "status": "passed",
          "title": "should return 400 for invalid intent data",
          "duration": 0.39662500000031287,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments/intents", "POST /api/payments/intents"],
          "fullName": "/api/payments/intents POST /api/payments/intents should handle intent creation failure",
          "status": "passed",
          "title": "should handle intent creation failure",
          "duration": 0.35541600000033213,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments/intents", "PATCH /api/payments/intents"],
          "fullName": "/api/payments/intents PATCH /api/payments/intents should confirm payment intent successfully",
          "status": "passed",
          "title": "should confirm payment intent successfully",
          "duration": 0.44120899999961694,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments/intents", "PATCH /api/payments/intents"],
          "fullName": "/api/payments/intents PATCH /api/payments/intents should return 400 for missing intentId",
          "status": "passed",
          "title": "should return 400 for missing intentId",
          "duration": 0.3340829999997368,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["/api/payments/intents", "PATCH /api/payments/intents"],
          "fullName": "/api/payments/intents PATCH /api/payments/intents should handle confirmation failure",
          "status": "passed",
          "title": "should handle confirmation failure",
          "duration": 0.314209000000119,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1754356054907,
      "endTime": 1754356054909.4412,
      "status": "passed",
      "message": "",
      "name": "/Users/pon/dev/salon-management/app/api/payments/intents/__tests__/route.test.ts"
    }
  ]
}
